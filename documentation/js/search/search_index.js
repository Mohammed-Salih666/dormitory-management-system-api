var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/ApartmentsController.html",[0,1.212,1,1.744]],["body/controllers/ApartmentsController.html",[0,0.819,1,1.786,2,0.819,3,0.308,4,0.264,5,0.264,6,1.592,7,1.355,8,1.179,9,0.459,10,1.393,11,2.61,12,1.241,13,1.572,14,2.413,15,1.393,16,2.413,17,1.393,18,1.393,19,0.92,20,2.117,21,2.487,22,0.045,23,2.054,24,1.564,25,1.952,26,2.205,27,1.752,28,1.242,29,2.205,30,2.122,31,2.205,32,2.487,33,1.952,34,1.916,35,1.952,36,2.479,37,2.913,38,3.493,39,4.935,40,1.592,41,2.958,42,1.952,43,1.592,44,2.259,45,2.958,46,1.952,47,2.91,48,1.592,49,2.958,50,1.952,51,1.592,52,2.958,53,1.952,54,1.592,55,2.156,56,2.958,57,1.952,58,0.649,59,1.355,60,1.355,61,1.179,62,0.92,63,2.054,64,1.592,65,0.459,66,1.393,67,1.592,68,0.92,69,1.592,70,1.952,71,0.308,72,0.077,73,0.92,74,0.92,75,0.92,76,1.952,77,1.952,78,1.897,79,3.25,80,1.682,81,2.913,82,1.963,83,1.952,84,1.952,85,3.984,86,1.952,87,1.952,88,1.952,89,1.952,90,1.952,91,1.952,92,1.355,93,1.952,94,1.952,95,1.952,96,1.952,97,1.952,98,0.022,99,0.022]],["title/modules/ApartmentsModule.html",[100,0.766,101,1.535]],["body/modules/ApartmentsModule.html",[1,2.982,2,1.892,3,0.564,4,0.484,5,0.484,22,0.044,58,0.943,65,0.842,66,2.572,67,2.92,71,0.564,72,0.142,98,0.034,99,0.034,100,1.311,101,2.979,102,1.34,103,1.501,104,1.902,105,1.902,106,1.501,107,2.327,108,1.686,109,2.92,110,2.92,111,2.92,112,2.044,113,2.397,114,1.902,115,1.902,116,3.579,117,2.724,118,3.579,119,2.485]],["title/injectables/ApartmentsService.html",[66,1.361,120,1.212]],["body/injectables/ApartmentsService.html",[3,0.181,4,0.155,5,0.155,8,1.771,9,0.27,10,0.91,11,2.384,12,0.81,13,1.026,14,1.575,15,0.91,16,1.575,17,0.91,18,1.382,19,0.91,20,2.105,22,0.045,24,1.324,26,1.866,27,1.483,28,1.13,29,1.866,30,1.942,31,2.196,32,2.005,34,1.499,38,3.042,40,1.575,43,1.575,44,2.263,47,3.121,48,1.575,51,1.575,54,1.575,55,2.142,58,0.686,62,2.196,65,0.27,66,1.382,68,0.54,69,0.936,71,0.181,72,0.099,73,1.382,74,0.91,75,0.54,78,2.005,79,3.232,80,0.91,82,1.488,98,0.015,99,0.022,120,0.81,121,0.693,122,0.936,123,0.797,124,2.463,125,1.147,126,2.005,127,1.736,128,1.575,129,1.166,130,1.575,131,1.147,132,1.341,133,1.51,134,4.588,135,2.62,136,2.62,137,3.416,138,1.931,139,1.931,140,2.037,141,1.931,142,1.931,143,1.931,144,2.037,145,2.037,146,2.463,147,2.751,148,2.958,149,1.341,150,2.142,151,1.931,152,3.18,153,1.147,154,1.147,155,2.62,156,2.393,157,4.26,158,3.273,159,2.273,160,4.736,161,1.147,162,4.26,163,1.931,164,3.962,165,1.341,166,1.931,167,1.147,168,1.147,169,1.931,170,1.736,171,1.575,172,1.147,173,1.736,174,1.166,175,1.736,176,0.693,177,0.54,178,0.797,179,0.693,180,1.341,181,1.026,182,0.693,183,0.797,184,0.693,185,0.797,186,1.147,187,1.931,188,2.751,189,2.037,190,1.341,191,1.931,192,2.501,193,2.933,194,2.933,195,1.931,196,1.931,197,1.147,198,1.147,199,1.931,200,1.147,201,0.936,202,1.147,203,0.797,204,1.147,205,1.147,206,1.147,207,1.931,208,1.147,209,1.147,210,0.797,211,0.797,212,1.147,213,0.797,214,0.693,215,0.797,216,1.147,217,0.797]],["title/modules/AppModule.html",[100,0.766,218,1.744]],["body/modules/AppModule.html",[3,0.511,4,0.438,5,0.438,22,0.045,58,0.985,65,0.763,71,0.511,72,0.129,80,1.995,98,0.032,99,0.032,100,1.251,101,2.826,102,1.214,103,1.361,104,1.724,105,1.724,106,1.361,107,1.528,108,1.528,112,1.991,113,2.25,114,1.724,115,1.724,117,2.557,218,3.431,219,2.646,220,2.646,221,2.826,222,2.826,223,3.243,224,3.243,225,3.243,226,2.252,227,3.243,228,3.243,229,3.243,230,4.235,231,3.243,232,3.243,233,3.243,234,3.243,235,3.243,236,3.243,237,3.243]],["title/classes/CreateApartmentDto.html",[20,1.535,72,0.115]],["body/classes/CreateApartmentDto.html",[3,0.544,4,0.467,5,0.467,9,0.812,20,2.343,21,2.72,22,0.044,24,1.711,28,1.358,34,1.711,44,2.219,47,2.933,58,0.628,71,0.544,72,0.175,98,0.033,99,0.033,152,3.062,238,1.835,239,4.314,240,2.817,241,2.343,242,3.963,243,3.963,244,3.597,245,3.453,246,3.453,247,3.453,248,3.453,249,2.817,250,3.453,251,4.41,252,3.597,253,4.314,254,3.963,255,2.398]],["title/classes/CreateReservationDto.html",[72,0.115,256,1.535]],["body/classes/CreateReservationDto.html",[3,0.546,4,0.468,5,0.468,9,0.815,21,2.723,22,0.044,24,1.713,28,1.36,34,1.713,44,2.15,58,0.629,71,0.546,72,0.175,98,0.034,99,0.034,238,1.84,241,2.348,244,3.604,249,3.604,252,3.969,253,4.318,254,3.969,255,2.405,256,2.348,257,4.318,258,2.825,259,3.969,260,3.969,261,3.969,262,3.969,263,3.463,264,3.463,265,3.463,266,3.463]],["title/classes/CreateUserDto.html",[72,0.115,267,1.361]],["body/classes/CreateUserDto.html",[3,0.559,4,0.479,5,0.479,9,0.834,22,0.043,24,1.82,27,1.842,28,1.445,34,1.902,71,0.559,72,0.141,98,0.034,99,0.034,152,3.115,238,1.885,241,2.383,267,2.113,268,4.512,269,2.463,270,4.013,271,4.013,272,4.013,273,4.013,274,4.013,275,3.547,276,3.547,277,3.547,278,3.547,279,3.547,280,3.547]],["title/modules/DatabaseModule.html",[100,0.766,112,1.081]],["body/modules/DatabaseModule.html",[3,0.519,4,0.444,5,0.444,11,1.549,22,0.045,36,2.284,58,0.97,65,0.774,71,0.519,72,0.13,78,2.837,80,1.549,82,1.38,98,0.032,99,0.032,100,1.134,102,1.231,107,1.549,108,1.549,112,1.6,129,2.58,176,1.986,177,2.237,179,2.866,181,2.271,182,1.986,211,2.284,226,2.284,281,3.289,282,5.026,283,4.273,284,3.289,285,3.289,286,3.289,287,3.289,288,4.273,289,3.289,290,2.58,291,3.289,292,3.289,293,4.273,294,3.289,295,4.273,296,3.289,297,3.289,298,3.289,299,3.289,300,3.289,301,3.289,302,3.289,303,2.683]],["title/controllers/ReservationsController.html",[0,1.212,304,1.744]],["body/controllers/ReservationsController.html",[0,1.154,2,1.154,3,0.434,4,0.372,5,0.372,7,1.91,9,0.647,10,1.786,12,1.591,13,2.485,15,1.786,17,1.786,18,1.786,19,1.296,21,2.607,22,0.045,23,2.633,24,1.64,26,2.203,27,1.751,28,1.241,29,2.203,30,2.389,31,2.311,34,1.796,55,2.62,58,0.789,59,1.91,60,1.91,61,1.661,62,1.296,63,2.633,65,0.647,68,1.296,71,0.434,72,0.109,73,1.296,74,1.296,75,1.296,82,2.058,92,1.91,98,0.029,99,0.029,256,2.485,304,2.289,305,2.244,306,1.661,307,2.751,308,2.751,309,2.244,310,3.791,311,2.751,312,3.093,313,1.661,314,3.791,315,2.751,316,2.485,317,1.661,318,3.093,319,2.751,320,1.786,321,2.244,322,2.244,323,2.751,324,2.751,325,2.751,326,2.751,327,2.751,328,2.751,329,2.244,330,2.751,331,2.244,332,2.751]],["title/modules/ReservationsModule.html",[100,0.766,221,1.535]],["body/modules/ReservationsModule.html",[2,1.892,3,0.564,4,0.484,5,0.484,22,0.044,58,0.943,65,0.842,71,0.564,72,0.142,98,0.034,99,0.034,100,1.311,102,1.34,103,1.501,104,1.902,105,1.902,106,1.501,107,2.327,108,1.686,112,2.044,113,2.397,114,1.902,115,1.902,117,2.724,119,2.485,221,2.979,304,2.982,320,2.572,321,2.92,333,2.92,334,3.579,335,2.92,336,3.579,337,3.579]],["title/injectables/ReservationsService.html",[120,1.212,320,1.361]],["body/injectables/ReservationsService.html",[3,0.257,4,0.221,5,0.221,9,0.384,10,1.213,11,2.43,12,1.081,13,1.925,15,1.213,17,1.213,18,1.974,19,1.213,22,0.045,24,1.4,26,1.857,27,1.476,28,1.046,29,1.857,30,2.204,31,2.256,32,2.095,44,1.962,55,2.648,58,0.797,61,1.555,62,1.857,65,0.384,68,0.769,71,0.257,72,0.065,73,1.213,74,0.769,75,0.769,78,1.369,80,1.213,82,1.654,98,0.02,99,0.028,120,1.081,121,0.986,123,1.134,124,2.515,126,1.925,127,1.789,129,2.187,132,1.789,133,2.187,135,2.909,136,3.156,140,1.134,144,2.515,145,2.515,146,2.909,147,3.248,148,2.909,149,1.789,150,2.529,155,2.515,159,1.789,165,1.789,170,1.789,171,2.101,173,2.515,174,1.555,175,2.215,176,0.986,177,0.769,178,1.134,179,0.986,180,1.789,181,1.369,182,0.986,183,1.134,184,0.986,185,1.134,188,2.737,189,2.515,190,1.134,210,1.134,213,1.789,214,0.986,215,2.515,217,1.134,256,2.415,290,2.648,306,2.38,309,2.101,312,2.602,313,1.555,316,2.768,317,1.555,320,1.213,322,1.332,338,1.332,339,1.632,340,1.632,341,4.572,342,1.632,343,1.632,344,2.576,345,1.632,346,3.622,347,2.576,348,2.576,349,2.215,350,2.576,351,2.576,352,1.632,353,1.632,354,2.576,355,1.632,356,1.632,357,1.632,358,1.632,359,1.632,360,1.332,361,2.576,362,2.576]],["title/classes/UpdateUserDto.html",[72,0.115,363,1.535]],["body/classes/UpdateUserDto.html",[3,0.654,4,0.56,5,0.56,12,1.739,22,0.043,58,0.897,71,0.654,72,0.165,98,0.037,99,0.037,238,2.203,267,1.954,269,2.879,363,2.623,364,3.382,365,4.937,366,4.937,367,2.879,368,4.146,369,3.382,370,3.382]],["title/controllers/UsersController.html",[0,1.212,371,1.744]],["body/controllers/UsersController.html",[0,1.025,2,1.025,3,0.385,4,0.33,5,0.33,7,1.696,9,0.575,10,1.643,11,2.653,12,1.463,15,1.643,17,1.643,18,1.643,19,1.151,21,2.594,22,0.045,23,2.422,24,1.632,26,2.211,27,1.757,28,1.246,29,2.211,30,2.3,31,2.3,32,2.594,34,1.795,58,0.807,59,1.696,60,1.696,61,1.475,62,1.151,63,1.696,64,1.992,65,0.575,68,1.151,71,0.385,72,0.097,73,1.151,74,1.151,75,1.151,82,2.048,92,1.696,98,0.026,99,0.026,267,2.091,313,1.475,316,2.73,317,1.475,318,2.845,329,1.992,331,1.992,363,2.358,367,2.422,371,2.106,372,1.992,373,1.475,374,2.845,375,4.438,376,2.442,377,2.442,378,2.442,379,1.992,380,3.488,381,2.442,382,2.442,383,3.488,384,2.442,385,2.442,386,1.643,387,1.992,388,1.992,389,2.442,390,2.442,391,2.442,392,2.442,393,2.442,394,2.442,395,2.442,396,2.442,397,2.442,398,2.442,399,2.442]],["title/modules/UsersModule.html",[100,0.766,222,1.535]],["body/modules/UsersModule.html",[2,1.892,3,0.564,4,0.484,5,0.484,22,0.044,58,0.943,65,0.842,71,0.564,72,0.142,98,0.034,99,0.034,100,1.311,102,1.34,103,1.501,104,1.902,105,1.902,106,1.501,107,2.327,108,1.686,112,2.044,113,2.397,114,1.902,115,1.902,117,2.724,119,2.485,222,2.979,371,2.982,386,2.572,387,2.92,400,2.92,401,3.579,402,2.92,403,3.579,404,3.579]],["title/injectables/UsersService.html",[120,1.212,386,1.361]],["body/injectables/UsersService.html",[3,0.243,4,0.208,5,0.208,9,0.362,10,1.158,11,2.467,12,1.031,13,1.862,15,1.158,17,1.158,18,1.923,19,1.158,22,0.045,24,1.432,26,1.923,27,1.528,28,1.083,29,1.923,30,2.162,31,2.264,32,2.169,34,1.025,44,1.925,58,0.809,62,1.923,65,0.362,68,0.725,71,0.243,72,0.122,73,1.65,74,0.725,75,0.725,78,1.63,82,1.713,98,0.019,99,0.031,120,1.031,121,0.929,123,1.068,124,2.835,126,2.035,127,2.13,128,2.005,129,2.465,130,2.005,132,1.706,133,2.312,135,3.09,136,3.267,144,2.433,145,2.433,146,2.433,147,2.975,148,2.433,149,1.706,150,2.115,155,2.835,159,1.706,165,2.433,170,1.706,173,2.433,174,1.484,175,2.13,176,0.929,177,0.725,178,1.068,179,0.929,180,1.706,181,1.306,182,0.929,183,1.068,184,0.929,185,1.068,188,2.835,189,2.659,190,1.706,210,1.068,213,1.706,214,1.484,215,2.13,217,1.068,267,2.097,290,3.395,313,1.484,316,2.856,317,1.484,349,1.068,360,1.255,363,2.365,367,1.706,373,2.312,374,2.005,379,2.005,386,1.65,388,1.255,405,1.255,406,1.539,407,1.539,408,1.539,409,2.457,410,1.539,411,4.083,412,3.068,413,3.503,414,1.539,415,1.539,416,1.539,417,2.457,418,1.539,419,2.457,420,3.068,421,1.539,422,1.539,423,2.457]],["title/coverage.html",[424,2.722]],["body/coverage.html",[0,1.895,1,1.795,5,0.402,6,2.425,8,1.795,20,1.58,22,0.044,28,0.789,66,1.401,72,0.192,98,0.03,99,0.03,106,1.247,120,1.895,122,2.425,133,1.795,137,2.064,177,1.401,211,4.002,239,2.425,240,2.425,256,1.58,257,2.425,258,2.425,267,1.401,268,2.425,269,2.776,304,1.795,305,2.425,306,1.795,320,1.401,338,2.425,363,1.58,364,2.425,371,1.795,372,2.425,373,1.795,386,1.401,405,2.425,424,2.064,425,2.973,426,2.973,427,2.973,428,2.973,429,2.973,430,2.973,431,3.998,432,2.425,433,5.519,434,5.608,435,4.455,436,2.425,437,2.425,438,2.425,439,2.425,440,2.425,441,2.425,442,2.973,443,2.973,444,2.973,445,2.973,446,3.998,447,2.973,448,2.973,449,2.973,450,2.973]],["title/dependencies.html",[103,1.455,451,1.976]],["body/dependencies.html",[22,0.044,65,0.933,72,0.191,98,0.036,99,0.036,103,1.663,181,2.107,184,2.394,226,2.753,255,2.753,369,3.234,370,3.234,452,5.171,453,3.965,454,3.965,455,3.965,456,3.965,457,3.965,458,3.965,459,3.965,460,3.965,461,3.965,462,3.965,463,3.965,464,3.965,465,3.965,466,3.965,467,3.965,468,3.965]],["title/miscellaneous/functions.html",[469,1.463,470,2.829]],["body/miscellaneous/functions.html",[9,1.046,22,0.039,98,0.039,99,0.039,106,2.276,441,3.625,469,2.683,470,3.625,471,4.444]],["title/index.html",[9,0.57,472,2.423,473,2.423]],["body/index.html",[4,0.452,22,0.044,98,0.033,99,0.033,126,1.777,303,3.525,424,2.323,474,3.345,475,3.345,476,4.321,477,3.345,478,3.345,479,3.345,480,3.345,481,3.345,482,3.345,483,4.786,484,3.345,485,3.345,486,3.345,487,3.345,488,4.786,489,5.458,490,3.345,491,3.345,492,3.345,493,5.363,494,3.345,495,3.345,496,3.345,497,3.345,498,3.345,499,3.345,500,4.321,501,4.321,502,3.345,503,3.345,504,3.345,505,4.321,506,4.321,507,3.345,508,3.345,509,3.345,510,3.345,511,3.345,512,2.729,513,3.345,514,3.345,515,3.345,516,3.345,517,3.345,518,3.345,519,3.345,520,3.345,521,3.345,522,3.345,523,2.729,524,3.345,525,3.345,526,3.345,527,3.345,528,3.345,529,3.345,530,2.729]],["title/modules.html",[102,1.468]],["body/modules.html",[22,0.038,98,0.038,99,0.038,101,2.219,102,1.563,112,1.563,156,3.406,218,2.521,221,2.219,222,2.219,512,4.462,531,5.47,532,5.47,533,5.585,534,4.176]],["title/overview.html",[535,3.198]],["body/overview.html",[2,1.444,22,0.044,66,2.286,98,0.033,99,0.033,100,0.914,101,2.919,102,1.289,103,1.444,104,1.829,105,1.829,106,1.444,107,1.622,108,1.622,109,2.808,110,2.808,111,2.808,112,2.023,113,2.339,114,1.829,115,1.829,121,2.079,203,3.056,218,3.419,219,2.808,220,2.808,221,2.919,222,2.919,238,1.829,320,2.286,333,2.808,335,2.808,386,2.286,400,2.808,402,2.808,535,2.808,536,3.443,537,2.808]],["title/properties.html",[241,1.843,451,1.976]],["body/properties.html",[22,0.044,98,0.039,99,0.039,126,2.335,241,2.335,523,3.585,530,3.585,538,4.394,539,4.394,540,4.394]],["title/miscellaneous/variables.html",[469,1.463,541,2.829]],["body/miscellaneous/variables.html",[8,1.955,9,0.519,22,0.045,27,0.825,28,0.585,34,0.737,36,3.6,37,4.229,38,1.531,44,0.925,47,1.331,80,1.039,81,1.798,98,0.025,99,0.025,134,1.798,137,2.666,140,1.531,150,1.955,174,1.955,177,1.808,201,1.798,203,1.531,214,2.721,242,1.798,243,1.798,259,1.798,260,1.798,261,1.798,262,1.798,270,1.798,271,1.798,272,1.798,273,1.798,274,1.798,290,1.331,306,1.955,316,2.395,341,1.798,349,3.13,373,1.955,432,1.798,435,1.798,436,2.642,437,2.642,438,2.642,439,2.642,440,2.642,469,1.331,537,1.798,541,1.798,542,5.099,543,2.204,544,2.204,545,4.507,546,2.204,547,5.317,548,5.255,549,2.204,550,2.204,551,2.204,552,4.996,553,4.507,554,4.507,555,4.507,556,4.507,557,2.204,558,3.238,559,3.238,560,2.204,561,2.204,562,2.204,563,4.712,564,2.204,565,2.204,566,2.204,567,3.238,568,3.238,569,2.204,570,2.204,571,3.238,572,2.204,573,2.204,574,2.204,575,2.204,576,2.204,577,2.204,578,2.204,579,2.204,580,2.204,581,3.238,582,2.204,583,2.204,584,2.204,585,2.204,586,2.204,587,3.238,588,2.204,589,2.204,590,2.204,591,2.204,592,2.204,593,2.204,594,2.204,595,2.204,596,2.204,597,2.204,598,2.204,599,2.204,600,2.204,601,2.204,602,2.204,603,2.204,604,2.204,605,2.204]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":211,"title":{},"body":{"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"coverage.html":{}}}],["0.0.1",{"_index":539,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":460,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["0.34.1",{"_index":461,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":459,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":443,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":446,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":204,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["10",{"_index":300,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["10.0.0",{"_index":452,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":201,"title":{},"body":{"injectables/ApartmentsService.html":{},"miscellaneous/variables.html":{}}}],["2.0.5",{"_index":455,"title":{},"body":{"dependencies.html":{}}}],["255",{"_index":552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["255}).unique().notnull",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":203,"title":{},"body":{"injectables/ApartmentsService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["3.11.3",{"_index":463,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":453,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":537,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["5",{"_index":536,"title":{},"body":{"overview.html":{}}}],["5/7",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":468,"title":{},"body":{"dependencies.html":{}}}],["7/9",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["allapartments",{"_index":187,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["allreservations",{"_index":354,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["allusers",{"_index":417,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":513,"title":{},"body":{"index.html":{}}}],["apartment",{"_index":134,"title":{},"body":{"injectables/ApartmentsService.html":{},"miscellaneous/variables.html":{}}}],["apartment.dto",{"_index":69,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["apartment.dto.ts",{"_index":240,"title":{},"body":{"classes/CreateApartmentDto.html":{},"coverage.html":{}}}],["apartment.dto.ts:10",{"_index":250,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment.dto.ts:14",{"_index":248,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment.dto.ts:18",{"_index":245,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment.dto.ts:6",{"_index":246,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment_id",{"_index":579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apartment_type",{"_index":242,"title":{},"body":{"classes/CreateApartmentDto.html":{},"miscellaneous/variables.html":{}}}],["apartmentnumber",{"_index":160,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["apartments",{"_index":8,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apartments.controller",{"_index":118,"title":{},"body":{"modules/ApartmentsModule.html":{}}}],["apartments.id",{"_index":581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apartments.service",{"_index":67,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{}}}],["apartments/apartments.module",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["apartmentscontroller",{"_index":1,"title":{"controllers/ApartmentsController.html":{}},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"coverage.html":{}}}],["apartmentservice",{"_index":76,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["apartmentsmodule",{"_index":101,"title":{"modules/ApartmentsModule.html":{}},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apartmentsrelations",{"_index":436,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apartmentsservice",{"_index":66,"title":{"injectables/ApartmentsService.html":{}},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"coverage.html":{},"overview.html":{}}}],["app",{"_index":491,"title":{},"body":{"index.html":{}}}],["applications",{"_index":482,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":218,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":159,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["assigned",{"_index":141,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["author",{"_index":523,"title":{},"body":{"index.html":{},"properties.html":{}}}],["available",{"_index":156,"title":{},"body":{"injectables/ApartmentsService.html":{},"modules.html":{}}}],["await",{"_index":188,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":514,"title":{},"body":{"index.html":{}}}],["based",{"_index":135,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["body",{"_index":63,"title":{},"body":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":152,"title":{},"body":{"injectables/ApartmentsService.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateUserDto.html":{}}}],["boolean('gender').notnull().default(true",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean('has_deposit').notnull().default(false",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean('is_available').notnull().default(true",{"_index":585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean(`for_male`).notnull().default(true",{"_index":550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":106,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":533,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":531,"title":{},"body":{"modules.html":{}}}],["building",{"_index":477,"title":{},"body":{"index.html":{}}}],["cache",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["class",{"_index":72,"title":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":238,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["cluster_apartmentsmodule",{"_index":109,"title":{},"body":{"modules/ApartmentsModule.html":{},"overview.html":{}}}],["cluster_apartmentsmodule_imports",{"_index":110,"title":{},"body":{"modules/ApartmentsModule.html":{},"overview.html":{}}}],["cluster_apartmentsmodule_providers",{"_index":111,"title":{},"body":{"modules/ApartmentsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_reservationsmodule",{"_index":333,"title":{},"body":{"modules/ReservationsModule.html":{},"overview.html":{}}}],["cluster_reservationsmodule_imports",{"_index":334,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["cluster_reservationsmodule_providers",{"_index":335,"title":{},"body":{"modules/ReservationsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":400,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":401,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":402,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["condition",{"_index":195,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["config/database.config",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":282,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_host",{"_index":289,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_name",{"_index":292,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_password",{"_index":294,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_port",{"_index":296,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_username",{"_index":291,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["connectionlimit",{"_index":299,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["const",{"_index":78,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["constants",{"_index":285,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["constructor",{"_index":73,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(db",{"_index":123,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["containing",{"_index":144,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["controller",{"_index":0,"title":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('apartments",{"_index":70,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["controller('reservations",{"_index":323,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["controller('users",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":424,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":12,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":92,"title":{},"body":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["create(dto",{"_index":19,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createapartmentdto",{"_index":20,"title":{"classes/CreateApartmentDto.html":{}},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"classes/CreateApartmentDto.html":{},"coverage.html":{}}}],["created",{"_index":360,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["created_at",{"_index":553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpool",{"_index":283,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["createreservationdto",{"_index":256,"title":{"classes/CreateReservationDto.html":{}},"body":{"classes/CreateReservationDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"coverage.html":{}}}],["creates",{"_index":132,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":267,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creation",{"_index":149,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["criteria",{"_index":166,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["current",{"_index":351,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["database",{"_index":129,"title":{},"body":{"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["database/database.module",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["database/schema",{"_index":180,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["databaseconfig",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":112,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":215,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["db",{"_index":127,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["declarations",{"_index":105,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":21,"title":{},"body":{"controllers/ApartmentsController.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":36,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":24,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":61,"title":{},"body":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{}}}],["delete(':floor/:number/delete",{"_index":52,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["delete(':id/delete",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id/remove",{"_index":314,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["delete(apartments",{"_index":216,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["deleted_at",{"_index":349,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["deletes",{"_index":347,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["dependencies",{"_index":103,"title":{"dependencies.html":{}},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":126,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":145,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["determined",{"_index":138,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["development",{"_index":492,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["drizzle",{"_index":181,"title":{},"body":{"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["drizzle(pool",{"_index":302,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dto",{"_index":30,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.apartment_type",{"_index":199,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["dto/create",{"_index":68,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":502,"title":{},"body":{"index.html":{}}}],["each",{"_index":139,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["economy",{"_index":202,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["efficient",{"_index":478,"title":{},"body":{"index.html":{}}}],["email",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["env",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["eq",{"_index":183,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["eq(apartments.floor",{"_index":193,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["eq(apartments.for_male",{"_index":192,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["eq(apartments.number",{"_index":194,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["eq(reservations.id",{"_index":362,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["eq(reservations.user_id",{"_index":358,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["eq(schema.rooms.is_available",{"_index":197,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["example",{"_index":488,"title":{},"body":{"index.html":{}}}],["existing",{"_index":170,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["export",{"_index":71,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":108,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":457,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":365,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["false",{"_index":81,"title":{},"body":{"controllers/ApartmentsController.html":{},"miscellaneous/variables.html":{}}}],["female",{"_index":601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["field",{"_index":350,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["fields",{"_index":174,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":13,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["findall(@query('gender",{"_index":77,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["findall(formale",{"_index":151,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["findall(gender",{"_index":33,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["findavailablerooms",{"_index":14,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["findavailablerooms(@query('gender",{"_index":90,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["findavailablerooms(gender",{"_index":40,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["findbyuniid",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyuniid(@query('uniid",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyuniid(id",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyuniid(uniid",{"_index":409,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":15,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('floor",{"_index":84,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["findone(@param('id",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(@param('user_id",{"_index":326,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["findone(floor",{"_index":43,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["findone(id",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(userid",{"_index":309,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["findroomsbyapartment",{"_index":16,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["findroomsbyapartment(@param('floor",{"_index":88,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["findroomsbyapartment(floor",{"_index":48,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["floor",{"_index":47,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"classes/CreateApartmentDto.html":{},"miscellaneous/variables.html":{}}}],["for_male",{"_index":243,"title":{},"body":{"classes/CreateApartmentDto.html":{},"miscellaneous/variables.html":{}}}],["formale",{"_index":79,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["framework",{"_index":476,"title":{},"body":{"index.html":{}}}],["from(apartments",{"_index":191,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["from(reservations",{"_index":355,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["from(users",{"_index":419,"title":{},"body":{"injectables/UsersService.html":{}}}],["function",{"_index":442,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":470,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":38,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"miscellaneous/variables.html":{}}}],["get(':id",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':user_id",{"_index":310,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["get('available",{"_index":41,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["get('floor/:floor/number/:number",{"_index":45,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["get('floor/:floor/number/:number/rooms",{"_index":49,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["getall",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["getting",{"_index":472,"title":{"index.html":{}},"body":{}}],["given",{"_index":157,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["graph",{"_index":534,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":509,"title":{},"body":{"index.html":{}}}],["has_deposit",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["here",{"_index":520,"title":{},"body":{"index.html":{}}}],["host",{"_index":288,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["https://nestjs.com",{"_index":527,"title":{},"body":{"index.html":{}}}],["id",{"_index":316,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":426,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["import",{"_index":58,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":117,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":148,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":176,"title":{},"body":{"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["inject(mysql_connection",{"_index":185,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":120,"title":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":121,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["insert(apartments",{"_index":209,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["insert(reservations",{"_index":359,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["insert(users",{"_index":422,"title":{},"body":{"injectables/UsersService.html":{}}}],["inspection_date",{"_index":565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inspections",{"_index":437,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["installation",{"_index":487,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":490,"title":{},"body":{"index.html":{}}}],["instance",{"_index":128,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/UsersService.html":{}}}],["int('apartment_id",{"_index":580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["int('id').primarykey().autoincrement",{"_index":545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["int('number').notnull",{"_index":549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["int('reservation_id",{"_index":562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["int('room_id",{"_index":572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["int('user_id",{"_index":570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_available",{"_index":584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isboolean",{"_index":251,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["isboolean()@isnotempty",{"_index":247,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["isglobal",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":252,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{}}}],["isint()@isnotempty",{"_index":249,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{}}}],["isnotempty",{"_index":253,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{}}}],["isnull",{"_index":353,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["isstring",{"_index":254,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{}}}],["isstring()@isnotempty",{"_index":244,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{}}}],["join",{"_index":516,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":524,"title":{},"body":{"index.html":{}}}],["legend",{"_index":104,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":530,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":506,"title":{},"body":{"index.html":{}}}],["load",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["located",{"_index":164,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["m",{"_index":39,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["male",{"_index":600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["males",{"_index":158,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["many",{"_index":558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["many(rooms",{"_index":559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["many(users",{"_index":577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":99,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":147,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":465,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":469,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":505,"title":{},"body":{"index.html":{}}}],["mode",{"_index":303,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["module",{"_index":100,"title":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":102,"title":{"modules.html":{}},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":519,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":462,"title":{},"body":{"dependencies.html":{}}}],["mysql2/promise",{"_index":284,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mysql2database",{"_index":124,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["mysql_connection",{"_index":177,"title":{},"body":{"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mysqltable('apartments",{"_index":544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysqltable('inspections",{"_index":560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysqltable('reservations",{"_index":569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysqltable('rooms",{"_index":578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysqltable('users",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":525,"title":{},"body":{"index.html":{}}}],["name",{"_index":27,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"classes/CreateUserDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":483,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":529,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":65,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":454,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":369,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":456,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":133,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["node.js",{"_index":475,"title":{},"body":{"index.html":{}}}],["notnull",{"_index":548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notnull().default('pending",{"_index":568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notnull().default('resident",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["npm",{"_index":489,"title":{},"body":{"index.html":{}}}],["number",{"_index":44,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":146,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["one",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one(apartments",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one(reservations",{"_index":604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["open",{"_index":507,"title":{},"body":{"index.html":{}}}],["operations",{"_index":130,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/UsersService.html":{}}}],["optional",{"_index":29,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["orm",{"_index":184,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["orm/mysql2",{"_index":182,"title":{},"body":{"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":115,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":535,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":451,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":62,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('number",{"_index":85,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["parameters",{"_index":26,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partial",{"_index":55,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["partialtype",{"_index":368,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":366,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":293,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["patch",{"_index":60,"title":{},"body":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':floor/:number/update",{"_index":56,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["patch(':id/update",{"_index":318,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["please",{"_index":517,"title":{},"body":{"index.html":{}}}],["pool",{"_index":297,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["port",{"_index":295,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["post",{"_index":59,"title":{},"body":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["post('create",{"_index":23,"title":{},"body":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["preference",{"_index":163,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":74,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":497,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":474,"title":{},"body":{"index.html":{}}}],["project",{"_index":508,"title":{},"body":{"index.html":{}}}],["properties",{"_index":241,"title":{"properties.html":{}},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"properties.html":{}}}],["provide",{"_index":286,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["provided",{"_index":136,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":107,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["query",{"_index":64,"title":{},"body":{"controllers/ApartmentsController.html":{},"controllers/UsersController.html":{}}}],["query('gender",{"_index":86,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["queuelimit",{"_index":301,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["read",{"_index":518,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":75,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["references",{"_index":563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":464,"title":{},"body":{"dependencies.html":{}}}],["relations(apartments",{"_index":557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relations(reservations",{"_index":576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relations(rooms",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relations(users",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["removal",{"_index":171,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{}}}],["remove",{"_index":17,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('floor",{"_index":96,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["remove(@param('id",{"_index":331,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["remove(floor",{"_index":51,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["remove(id",{"_index":313,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["removed",{"_index":217,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["removes",{"_index":169,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["repository",{"_index":486,"title":{},"body":{"index.html":{}}}],["reservation",{"_index":341,"title":{},"body":{"injectables/ReservationsService.html":{},"miscellaneous/variables.html":{}}}],["reservation.dto",{"_index":322,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["reservation.dto.ts",{"_index":258,"title":{},"body":{"classes/CreateReservationDto.html":{},"coverage.html":{}}}],["reservation.dto.ts:11",{"_index":263,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:15",{"_index":264,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:19",{"_index":266,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:7",{"_index":265,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation_id",{"_index":561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reservations",{"_index":306,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reservations.controller",{"_index":337,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["reservations.id",{"_index":564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reservations.service",{"_index":321,"title":{},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{}}}],["reservations.user_id",{"_index":605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reservations/reservations.module",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["reservationscontroller",{"_index":304,"title":{"controllers/ReservationsController.html":{}},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"coverage.html":{}}}],["reservationservice",{"_index":324,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["reservationsmodule",{"_index":221,"title":{"modules/ReservationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules.html":{},"overview.html":{}}}],["reservationsrelations",{"_index":438,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["reservationsservice",{"_index":320,"title":{"injectables/ReservationsService.html":{}},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"coverage.html":{},"overview.html":{}}}],["reset",{"_index":114,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["result",{"_index":208,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["results",{"_index":98,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":413,"title":{},"body":{"injectables/UsersService.html":{}}}],["retrieved",{"_index":344,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["retrieves",{"_index":155,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":82,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":31,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["role",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["room",{"_index":140,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"miscellaneous/variables.html":{}}}],["room_id",{"_index":259,"title":{},"body":{"classes/CreateReservationDto.html":{},"miscellaneous/variables.html":{}}}],["room_number",{"_index":582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roomletter",{"_index":205,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["rooms",{"_index":137,"title":{},"body":{"injectables/ApartmentsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rooms.apartment_id",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rooms.id",{"_index":573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roomscount",{"_index":198,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["roomsrelations",{"_index":439,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":493,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":479,"title":{},"body":{"index.html":{}}}],["schema",{"_index":179,"title":{},"body":{"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["select",{"_index":190,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["semester",{"_index":260,"title":{},"body":{"classes/CreateReservationDto.html":{},"miscellaneous/variables.html":{}}}],["server",{"_index":480,"title":{},"body":{"index.html":{}}}],["set",{"_index":213,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["setting",{"_index":348,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["side",{"_index":481,"title":{},"body":{"index.html":{}}}],["soft",{"_index":346,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["specific",{"_index":162,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["specified",{"_index":165,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["sponsors",{"_index":511,"title":{},"body":{"index.html":{}}}],["src/.../index.ts",{"_index":543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":471,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../schema.ts",{"_index":542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/apartments/apartments.controller.ts",{"_index":6,"title":{},"body":{"controllers/ApartmentsController.html":{},"coverage.html":{}}}],["src/apartments/apartments.controller.ts:12",{"_index":35,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["src/apartments/apartments.controller.ts:19",{"_index":46,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["src/apartments/apartments.controller.ts:25",{"_index":50,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["src/apartments/apartments.controller.ts:30",{"_index":42,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["src/apartments/apartments.controller.ts:36",{"_index":25,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["src/apartments/apartments.controller.ts:41",{"_index":57,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["src/apartments/apartments.controller.ts:46",{"_index":53,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["src/apartments/apartments.module.ts",{"_index":116,"title":{},"body":{"modules/ApartmentsModule.html":{}}}],["src/apartments/apartments.service.ts",{"_index":122,"title":{},"body":{"injectables/ApartmentsService.html":{},"coverage.html":{}}}],["src/apartments/apartments.service.ts:110",{"_index":131,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["src/apartments/apartments.service.ts:149",{"_index":172,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["src/apartments/apartments.service.ts:175",{"_index":168,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["src/apartments/apartments.service.ts:20",{"_index":153,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["src/apartments/apartments.service.ts:45",{"_index":161,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["src/apartments/apartments.service.ts:67",{"_index":167,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["src/apartments/apartments.service.ts:89",{"_index":154,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["src/apartments/apartments.service.ts:9",{"_index":125,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["src/apartments/dto/create",{"_index":239,"title":{},"body":{"classes/CreateApartmentDto.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["src/constants",{"_index":178,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["src/constants/index.ts",{"_index":432,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/database.module",{"_index":119,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{}}}],["src/database/database.module.ts",{"_index":281,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/schema.ts",{"_index":435,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":441,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/reservations/dto/create",{"_index":257,"title":{},"body":{"classes/CreateReservationDto.html":{},"coverage.html":{}}}],["src/reservations/reservations.controller.ts",{"_index":305,"title":{},"body":{"controllers/ReservationsController.html":{},"coverage.html":{}}}],["src/reservations/reservations.controller.ts:13",{"_index":308,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/reservations/reservations.controller.ts:18",{"_index":311,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/reservations/reservations.controller.ts:23",{"_index":307,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/reservations/reservations.controller.ts:28",{"_index":319,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/reservations/reservations.controller.ts:33",{"_index":315,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/reservations/reservations.module.ts",{"_index":336,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["src/reservations/reservations.service.ts",{"_index":338,"title":{},"body":{"injectables/ReservationsService.html":{},"coverage.html":{}}}],["src/reservations/reservations.service.ts:20",{"_index":342,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:35",{"_index":343,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:53",{"_index":340,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:71",{"_index":352,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:9",{"_index":339,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:93",{"_index":345,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/users/dto/create",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":364,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:14",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:19",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:24",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:29",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:34",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:39",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":403,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":405,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:102",{"_index":415,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:11",{"_index":406,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":408,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:40",{"_index":414,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:55",{"_index":410,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:70",{"_index":407,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:88",{"_index":416,"title":{},"body":{"injectables/UsersService.html":{}}}],["standard",{"_index":200,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["start",{"_index":494,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":496,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":498,"title":{},"body":{"index.html":{}}}],["started",{"_index":473,"title":{"index.html":{}},"body":{}}],["starter",{"_index":485,"title":{},"body":{"index.html":{}}}],["starting",{"_index":143,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["statements",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":150,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["stay",{"_index":521,"title":{},"body":{"index.html":{}}}],["string",{"_index":34,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string,@body",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["support",{"_index":512,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":532,"title":{},"body":{"modules.html":{}}}],["table",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":501,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":504,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":503,"title":{},"body":{"index.html":{}}}],["tests",{"_index":500,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":510,"title":{},"body":{"index.html":{}}}],["this.apartmentservice.create(dto",{"_index":93,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["this.apartmentservice.findall(formale",{"_index":83,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["this.apartmentservice.findavailablerooms(formale",{"_index":91,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["this.apartmentservice.findone(floor",{"_index":87,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["this.apartmentservice.findroomsbyapartment(floor",{"_index":89,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["this.apartmentservice.remove(floor",{"_index":97,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["this.apartmentservice.update(floor",{"_index":95,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["this.db",{"_index":189,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["this.db.query.apartments.findmany",{"_index":196,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["this.db.query.reservations.findfirst",{"_index":357,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.db.select().from(users",{"_index":418,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.db.transaction(async",{"_index":206,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["this.reservationservice.create(dto",{"_index":328,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationservice.findall",{"_index":325,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationservice.findone(+userid",{"_index":327,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationservice.remove(+id",{"_index":332,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationservice.update(+id",{"_index":330,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.userservice.create(dto",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findall",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findbyuniid(id",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findone(+id",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.remove(+id",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.update(+id",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["timestamp('created_at').notnull().defaultnow",{"_index":554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timestamp('deleted_at",{"_index":556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timestamp('inspection_date').notnull",{"_index":566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timestamp('updated_at').notnull().defaultnow",{"_index":555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["touch",{"_index":522,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":458,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":80,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":528,"title":{},"body":{"index.html":{}}}],["tx",{"_index":207,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["type",{"_index":28,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":370,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":484,"title":{},"body":{"index.html":{}}}],["uni_id",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["uniid",{"_index":412,"title":{},"body":{"injectables/UsersService.html":{}}}],["unique",{"_index":142,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["unique().notnull",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unit",{"_index":499,"title":{},"body":{"index.html":{}}}],["university",{"_index":411,"title":{},"body":{"injectables/UsersService.html":{}}}],["unknown",{"_index":32,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":540,"title":{},"body":{"properties.html":{}}}],["update",{"_index":18,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('floor",{"_index":94,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["update(@param('id",{"_index":329,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["update(apartments",{"_index":212,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["update(floor",{"_index":54,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["update(id",{"_index":317,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(reservations",{"_index":361,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["update(users",{"_index":423,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated",{"_index":175,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["updated_at",{"_index":214,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["updates",{"_index":173,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":363,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usefactory",{"_index":287,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["user",{"_index":290,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":367,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:12",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:2",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:4",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:6",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user_id",{"_index":261,"title":{},"body":{"classes/CreateReservationDto.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":312,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["users",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users.controller",{"_index":404,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.id",{"_index":571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users.service",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":371,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersmodule",{"_index":222,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrelations",{"_index":440,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersservice",{"_index":386,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["validator",{"_index":255,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"dependencies.html":{}}}],["value",{"_index":37,"title":{},"body":{"controllers/ApartmentsController.html":{},"miscellaneous/variables.html":{}}}],["values(dto",{"_index":210,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["varchar('apartment_type",{"_index":551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('email",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('floor",{"_index":546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('image",{"_index":596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('name",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('role",{"_index":597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('room_number",{"_index":583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('semester",{"_index":574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('status",{"_index":567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('uni_id",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('year",{"_index":575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":433,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":541,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":538,"title":{},"body":{"properties.html":{}}}],["waitforconnections",{"_index":298,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["watch",{"_index":495,"title":{},"body":{"index.html":{}}}],["website",{"_index":526,"title":{},"body":{"index.html":{}}}],["where(eq(users.id",{"_index":420,"title":{},"body":{"injectables/UsersService.html":{}}}],["where(eq(users.uni_id",{"_index":421,"title":{},"body":{"injectables/UsersService.html":{}}}],["where(isnull(reservations.deleted_at",{"_index":356,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["whether",{"_index":186,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["year",{"_index":262,"title":{},"body":{"classes/CreateReservationDto.html":{},"miscellaneous/variables.html":{}}}],["you'd",{"_index":515,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":113,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/ApartmentsController.html":{"url":"controllers/ApartmentsController.html","title":"controller - ApartmentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ApartmentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apartments/apartments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                apartments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findAvailableRooms\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                findRoomsByApartment\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateApartmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/apartments/apartments.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateApartmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(gender: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/apartments/apartments.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                gender\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'M'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAvailableRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAvailableRooms(gender: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('available')\n                \n            \n\n                    \n                        \n                            Defined in src/apartments/apartments.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                gender\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'M'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(floor: string, number: string, gender: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('floor/:floor/number/:number')\n                \n            \n\n                    \n                        \n                            Defined in src/apartments/apartments.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                floor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                number\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                gender\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'M'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findRoomsByApartment\n                        \n                    \n                \n            \n            \n                \n                        \n                    findRoomsByApartment(floor: string, number: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('floor/:floor/number/:number/rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/apartments/apartments.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                floor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                number\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(floor: string, number: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':floor/:number/delete')\n                \n            \n\n                    \n                        \n                            Defined in src/apartments/apartments.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                floor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                number\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(floor: string, number: string, dto: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':floor/:number/update')\n                \n            \n\n                    \n                        \n                            Defined in src/apartments/apartments.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                floor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                number\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Patch, Delete, Param, Body, Query } from '@nestjs/common';\nimport { ApartmentsService } from './apartments.service';\nimport { CreateApartmentDto } from './dto/create-apartment.dto';\n\n@Controller('apartments')\nexport class ApartmentsController {\n  constructor(\n    private readonly apartmentService: ApartmentsService,\n  ) {}\n\n  @Get()\n  async findAll(@Query('gender') gender: string = 'M') { \n    const forMale = gender === 'M' ? true : false; \n\n    return this.apartmentService.findAll(forMale);\n  }\n\n  @Get('floor/:floor/number/:number')\n  async findOne(@Param('floor') floor: string, @Param('number') number: string, @Query('gender') gender: string = 'M') {\n    const forMale = gender === 'M' ? true : false; \n    return this.apartmentService.findOne(floor, +number, forMale)\n  }\n\n  @Get('floor/:floor/number/:number/rooms')\n  async findRoomsByApartment(@Param('floor') floor: string, @Param('number') number: string) {\n    return this.apartmentService.findRoomsByApartment(floor, +number);\n  }\n\n  @Get('available')\n  async findAvailableRooms(@Query('gender') gender: string = 'M') {\n    const forMale = gender === 'M' ? true : false;\n    return this.apartmentService.findAvailableRooms(forMale);\n  }\n\n  @Post('create')\n  async create(@Body() dto: CreateApartmentDto) {\n    return this.apartmentService.create(dto);\n  }\n\n  @Patch(':floor/:number/update')\n  async update(@Param('floor') floor: string, @Param('number') number: string, @Body() dto: Partial){\n    return this.apartmentService.update(floor, +number, dto);\n  }\n\n  @Delete(':floor/:number/delete')\n  async remove(@Param('floor') floor: string, @Param('number') number: string) {\n    return this.apartmentService.remove(floor, +number); \n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApartmentsModule.html":{"url":"modules/ApartmentsModule.html","title":"module - ApartmentsModule","body":"\n                   \n\n\n\n\n    Modules\n    ApartmentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApartmentsModule\n\n\n\ncluster_ApartmentsModule_imports\n\n\n\ncluster_ApartmentsModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nApartmentsModule\n\nApartmentsModule\n\nApartmentsModule -->\n\nDatabaseModule->ApartmentsModule\n\n\n\n\n\nApartmentsService\n\nApartmentsService\n\nApartmentsModule -->\n\nApartmentsService->ApartmentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/apartments/apartments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ApartmentsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ApartmentsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ApartmentsController } from './apartments.controller';\nimport { ApartmentsService } from './apartments.service';\nimport { DatabaseModule } from 'src/database/database.module';\n\n@Module({\n  controllers: [ApartmentsController],\n  providers: [ApartmentsService],\n  imports: [DatabaseModule]\n})\nexport class ApartmentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApartmentsService.html":{"url":"injectables/ApartmentsService.html","title":"injectable - ApartmentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApartmentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apartments/apartments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAvailableRooms\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findRoomsByApartment\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: MySql2Database<>)\n                    \n                \n                        \n                            \n                                Defined in src/apartments/apartments.service.ts:9\n                            \n                        \n\n                \n                    \n                            Constructor for the ApartmentsService class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    MySql2Database<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The MySql2Database instance for database operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateApartmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/apartments/apartments.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Creates a new apartment based on the provided CreateApartmentDto.\nThe number of rooms is determined by the apartment type.\nEach room is assigned a unique room number starting from 'A'.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateApartmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The CreateApartmentDto containing apartment details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with a message indicating the apartment creation status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(forMale: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/apartments/apartments.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                forMale\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAvailableRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAvailableRooms(gender: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/apartments/apartments.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Retrieves all available rooms for the given gender.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                gender\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A boolean indicating if the rooms are for males.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of all available rooms for the given gender.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(floor: string, apartmentNumber: number, forMale: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/apartments/apartments.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Retrieves a specific apartment based on floor, apartment number, and gender preference.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                floor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The floor on which the apartment is located.\n\n                                            \n                                        \n                                        \n                                                apartmentNumber\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The specific number of the apartment.\n\n                                            \n                                        \n                                        \n                                                forMale\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A boolean indicating if the apartment is for males.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The apartment matching the specified criteria.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findRoomsByApartment\n                        \n                    \n                \n            \n            \n                \n                        \n                    findRoomsByApartment(floor: string, number: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/apartments/apartments.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Retrieves all rooms for a given apartment.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                floor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The floor on which the apartment is located.\n\n                                            \n                                        \n                                        \n                                                number\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The specific number of the apartment.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of all rooms in the given apartment.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(floor: string, apartmentNumber: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/apartments/apartments.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Removes an existing apartment based on the provided floor and apartment number.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                floor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The floor on which the apartment is located.\n\n                                            \n                                        \n                                        \n                                                apartmentNumber\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The specific number of the apartment.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with a message indicating the apartment removal status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(floor: string, apartmentNumber: number, dto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/apartments/apartments.service.ts:149\n                        \n                    \n\n\n            \n                \n                        Updates an existing apartment based on the provided Partial.\nOnly updates the fields that are provided in the dto.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                floor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The floor on which the apartment is located.\n\n                                            \n                                        \n                                        \n                                                apartmentNumber\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The specific number of the apartment.\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Partial containing the updated apartment details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with a message indicating the apartment update status.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { MYSQL_CONNECTION } from 'src/constants';\nimport * as schema from '../database/schema';\nimport { apartments } from '../database/schema';\nimport { MySql2Database } from 'drizzle-orm/mysql2';\nimport { and, eq } from 'drizzle-orm';\nimport { CreateApartmentDto } from './dto/create-apartment.dto';\n@Injectable()\nexport class ApartmentsService {\n/**\n * Constructor for the ApartmentsService class.\n * \n * @param db The MySql2Database instance for database operations.\n */\n  constructor(\n    @Inject(MYSQL_CONNECTION)\n    private readonly db: MySql2Database, \n  ){}\n\n  async findAll(forMale: boolean) {\n  /**\n   * Retrieves all apartments for the given gender.\n   * @param forMale Whether the apartments are for males or not.\n   * @returns An array of all apartments for the given gender.\n   */\n    const allApartments = await this.db\n      .select()\n      .from(apartments)\n      .where(\n        eq(apartments.for_male, forMale)\n      ); \n\n    return allApartments; \n  }\n\n  \n  /**\n   * Retrieves a specific apartment based on floor, apartment number, and gender preference.\n   * \n   * @param floor The floor on which the apartment is located.\n   * @param apartmentNumber The specific number of the apartment.\n   * @param forMale A boolean indicating if the apartment is for males.\n   * @returns The apartment matching the specified criteria.\n   */\n  async findOne(floor: string, apartmentNumber: number, forMale: boolean) {\n    const apartment = await this.db\n    .select()\n    .from(apartments)\n    .where(\n      and(\n        eq(apartments.floor, floor), \n        eq(apartments.number, apartmentNumber),\n        eq(apartments.for_male, forMale),\n      )\n    ); \n    \n    return apartment; \n  }\n  \n  /**\n   * Retrieves all rooms for a given apartment.\n   * \n   * @param floor The floor on which the apartment is located.\n   * @param number The specific number of the apartment.\n   * @returns An array of all rooms in the given apartment.\n   */\n  async findRoomsByApartment(floor: string, number: number) {\n    const condition = and(\n      eq(apartments.floor, floor),\n      eq(apartments.number, number)\n    ); \n\n    const rooms = await this.db.query.apartments.findMany({\n      where: condition, \n      with: {\n        rooms: true,\n      }\n    }); \n\n    return rooms;\n  }\n\n  /**\n   * Retrieves all available rooms for the given gender.\n   * \n   * @param gender A boolean indicating if the rooms are for males.\n   * @returns An array of all available rooms for the given gender.\n   */\n  async findAvailableRooms(gender: boolean) {\n    const rooms = await this.db.query.apartments.findMany({\n      where: eq(apartments.for_male, gender),\n      with: {\n        rooms: {\n          where: eq(schema.rooms.is_available, true),\n        }\n      }\n    }); \n\n    return rooms; \n  }\n\n/**\n * Creates a new apartment based on the provided CreateApartmentDto.\n * The number of rooms is determined by the apartment type.\n * Each room is assigned a unique room number starting from 'A'.\n * \n * @param dto The CreateApartmentDto containing apartment details.\n * @returns An object with a message indicating the apartment creation status.\n */\n  async create(dto: CreateApartmentDto) {\n    const roomsCount = dto.apartment_type === \"standard\" ? 2\n                        : dto.apartment_type === \"economy\" ? 3\n                        : 1 //private\n\n    \n    let roomLetter = 'A'; \n\n    await this.db.transaction(async (tx) => {\n      const [result] = await tx\n      .insert(apartments)\n      .values(dto); \n\n      for (let i =0; i .\n   * Only updates the fields that are provided in the dto.\n   * \n   * @param floor The floor on which the apartment is located.\n   * @param apartmentNumber The specific number of the apartment.\n   * @param dto The Partial containing the updated apartment details.\n   * @returns An object with a message indicating the apartment update status.\n   */\n  async update(floor: string, apartmentNumber: number, dto: Partial) {\n    await this.db\n      .update(apartments)\n      .set({\n        ...dto,\n        updated_at: new Date(),\n      })\n      .where(\n        and(\n          eq(apartments.floor, floor),\n          eq(apartments.number, apartmentNumber),\n        )\n      ); \n\n    return {\n      message: \"Apartment Updated\",\n    }\n  }\n\n  /**\n   * Removes an existing apartment based on the provided floor and apartment number.\n   * \n   * @param floor The floor on which the apartment is located.\n   * @param apartmentNumber The specific number of the apartment.\n   * @returns An object with a message indicating the apartment removal status.\n   */\n  async remove(floor: string, apartmentNumber: number){\n    await this.db\n      .delete(apartments)\n      .where(\n        and(\n          eq(apartments.floor, floor),\n          eq(apartments.number, apartmentNumber),\n        )\n      ); \n\n    return {\n      message: \"Apartment Removed\",\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nApartmentsModule\n\nApartmentsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApartmentsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nReservationsModule\n\nReservationsModule\n\nAppModule -->\n\nReservationsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ApartmentsModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            ReservationsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseModule } from './database/database.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersModule } from './users/users.module';\nimport { ApartmentsModule } from './apartments/apartments.module';\nimport { ReservationsModule } from './reservations/reservations.module';\nimport databaseConfig from './config/database.config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [databaseConfig],\n      cache: true,\n      envFilePath: '.env',\n    }),\n    DatabaseModule,\n    UsersModule,\n    ApartmentsModule,\n    ReservationsModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateApartmentDto.html":{"url":"classes/CreateApartmentDto.html","title":"class - CreateApartmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateApartmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apartments/dto/create-apartment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                apartment_type\n                            \n                            \n                                    \n                                    \n                                floor\n                            \n                            \n                                    \n                                    \n                                for_male\n                            \n                            \n                                    \n                                    \n                                number\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        apartment_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartments/dto/create-apartment.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        floor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartments/dto/create-apartment.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        for_male\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartments/dto/create-apartment.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartments/dto/create-apartment.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsInt, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreateApartmentDto {\n  @IsString()\n  @IsNotEmpty()\n  floor: string;\n\n  @IsInt()\n  @IsNotEmpty()\n  number: number;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  for_male: boolean;\n\n  @IsString()\n  @IsNotEmpty()\n  apartment_type: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateReservationDto.html":{"url":"classes/CreateReservationDto.html","title":"class - CreateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservations/dto/create-reservation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                room_id\n                            \n                            \n                                    \n                                    \n                                semester\n                            \n                            \n                                    \n                                    \n                                user_id\n                            \n                            \n                                    \n                                    \n                                year\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        room_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservations/dto/create-reservation.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        semester\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservations/dto/create-reservation.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservations/dto/create-reservation.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        year\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservations/dto/create-reservation.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreateReservationDto {\n\n  @IsInt()\n  @IsNotEmpty()\n  user_id: number;\n\n  @IsInt()\n  @IsNotEmpty()\n  room_id: number;\n\n  @IsString()\n  @IsNotEmpty()\n  semester: string; \n\n  @IsString()\n  @IsNotEmpty()\n  year: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                has_deposit\n                            \n                            \n                                image\n                            \n                            \n                                name\n                            \n                            \n                                role\n                            \n                            \n                                uni_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has_deposit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uni_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n  name: string; \n  \n  uni_id: string;\n  \n  email: string; \n\n  image: string; \n\n  role: string; \n\n  has_deposit: boolean;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { createPool } from 'mysql2/promise';\nimport { drizzle } from 'drizzle-orm/mysql2'; \nimport { MYSQL_CONNECTION } from '../constants';\nimport * as schema from './schema';\n\n@Module({\n  providers: [\n    {\n      provide: MYSQL_CONNECTION,\n      inject: [ConfigService], \n      useFactory: async (configService: ConfigService) => {\n        const host = configService.get('DB_HOST');\n        const user = configService.get('DB_USERNAME');\n        const database = configService.get('DB_NAME');\n        const password = configService.get('DB_PASSWORD');\n        const port = configService.get('DB_PORT');\n        \n        const pool = createPool({\n          host,\n          user,\n          database, \n          password, \n          port, \n          waitForConnections: true, \n          connectionLimit: 10,\n          queueLimit: 0,\n        });\n\n        return drizzle(pool, {mode: 'default', schema})\n      }\n    }\n  ],\n  exports: [MYSQL_CONNECTION],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReservationsController.html":{"url":"controllers/ReservationsController.html","title":"controller - ReservationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReservationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservations/reservations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                reservations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateReservationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/reservations/reservations.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateReservationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/reservations/reservations.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':user_id')\n                \n            \n\n                    \n                        \n                            Defined in src/reservations/reservations.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/remove')\n                \n            \n\n                    \n                        \n                            Defined in src/reservations/reservations.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/update')\n                \n            \n\n                    \n                        \n                            Defined in src/reservations/reservations.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Patch, Delete, Body, Param } from '@nestjs/common';\nimport { ReservationsService } from './reservations.service';\nimport { CreateReservationDto } from './dto/create-reservation.dto';\n\n@Controller('reservations')\nexport class ReservationsController {\n\n  constructor(\n    private readonly reservationService: ReservationsService\n  ) {}\n\n  @Get()\n  findAll() {\n    return this.reservationService.findAll();\n  }\n\n  @Get(':user_id')\n  findOne(@Param('user_id') userId: string) {\n    return this.reservationService.findOne(+userId);\n  }\n\n  @Post('create')\n  create(@Body() dto: CreateReservationDto) {\n    return this.reservationService.create(dto);\n  }\n\n  @Patch(':id/update')\n  update(@Param('id') id: string, @Body() dto: Partial) {\n    return this.reservationService.update(+id, dto);\n  }\n\n  @Delete(':id/remove')\n  remove(@Param('id') id: string) {\n    return this.reservationService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReservationsModule.html":{"url":"modules/ReservationsModule.html","title":"module - ReservationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ReservationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReservationsModule\n\n\n\ncluster_ReservationsModule_imports\n\n\n\ncluster_ReservationsModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nReservationsModule\n\nReservationsModule\n\nReservationsModule -->\n\nDatabaseModule->ReservationsModule\n\n\n\n\n\nReservationsService\n\nReservationsService\n\nReservationsModule -->\n\nReservationsService->ReservationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/reservations/reservations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReservationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReservationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ReservationsService } from './reservations.service';\nimport { ReservationsController } from './reservations.controller';\nimport { DatabaseModule } from 'src/database/database.module';\n\n@Module({\n  providers: [ReservationsService],\n  controllers: [ReservationsController],\n  imports: [DatabaseModule]\n})\nexport class ReservationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReservationsService.html":{"url":"injectables/ReservationsService.html","title":"injectable - ReservationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservations/reservations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: MySql2Database<>)\n                    \n                \n                        \n                            \n                                Defined in src/reservations/reservations.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    MySql2Database<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateReservationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Creates a new reservation based on the provided CreateReservationDto.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateReservationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The CreateReservationDto containing reservation details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with a message indicating the reservation creation status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Retrieves all reservations from the database.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of all reservations in the database.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Retrieves a reservation based on the provided user ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user ID for which the reservation should be retrieved.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The reservation matching the specified user ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:93\n                        \n                    \n\n\n            \n                \n                        Soft deletes a reservation by setting the deleted_at field to the current date.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the reservation to soft delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with a message indicating the reservation removal status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, dto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:71\n                        \n                    \n\n\n            \n                \n                        Updates an existing reservation based on the provided Partial.\nOnly updates the fields that are provided in the dto.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the reservation to update.\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Partial containing the updated reservation details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with a message indicating the reservation update status.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { MySql2Database } from 'drizzle-orm/mysql2';\nimport { MYSQL_CONNECTION } from 'src/constants';\nimport * as schema from '../database/schema';\nimport { reservations } from '../database/schema';\nimport { eq, isNull } from 'drizzle-orm';\nimport { CreateReservationDto } from './dto/create-reservation.dto';\n@Injectable()\nexport class ReservationsService {\n  constructor(\n    @Inject(MYSQL_CONNECTION)\n    private readonly db: MySql2Database,\n  ){}\n\n  /**\n   * Retrieves all reservations from the database.\n   * \n   * @returns An array of all reservations in the database.\n   */\n  async findAll() {\n    const allReservations = await this.db\n      .select()\n      .from(reservations)\n      .where(isNull(reservations.deleted_at));\n \n    return allReservations;\n  }\n\n  /**\n   * Retrieves a reservation based on the provided user ID.\n   * \n   * @param userId The user ID for which the reservation should be retrieved.\n   * @returns The reservation matching the specified user ID.\n   */\n  async findOne(userId: number) {\n    const reservation = await this.db.query.reservations.findFirst({\n      where: eq(reservations.user_id, userId),\n      with: {\n        room: true,\n        user: true,\n      }\n    }); \n\n    return reservation; \n  }\n\n  /**\n   * Creates a new reservation based on the provided CreateReservationDto.\n   * \n   * @param dto The CreateReservationDto containing reservation details.\n   * @returns An object with a message indicating the reservation creation status.\n   */\n  async create(dto: CreateReservationDto) {\n    await this.db\n      .insert(reservations)\n      .values(dto); \n\n    return {\n      message: \"Reservation Created\"\n    }\n  }\n\n  /**\n   * Updates an existing reservation based on the provided Partial.\n   * Only updates the fields that are provided in the dto.\n   * \n   * @param id The ID of the reservation to update.\n   * @param dto The Partial containing the updated reservation details.\n   * @returns An object with a message indicating the reservation update status.\n   */\n  async update(id: number, dto: Partial) {\n    await this.db\n      .update(reservations)\n      .set({\n        ...dto, \n        updated_at: new Date(),\n      })\n      .where(\n        eq(reservations.id, id)\n      ); \n\n    return {\n      message: \"Reservation Updated\"\n    }\n  }\n\n  /**\n   * Soft deletes a reservation by setting the deleted_at field to the current date.\n   * \n   * @param id The ID of the reservation to soft delete.\n   * @returns An object with a message indicating the reservation removal status.\n   */\n  async remove(id: number) {\n    await this.db\n      .update(reservations)\n      .set({\n        deleted_at: new Date(),\n      })\n      .where(\n        eq(reservations.id, id)\n      ); \n\n    return {\n      message: \"Reservation Removed\"\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from \"./create-user.dto\";\nimport { PartialType } from '@nestjs/mapped-types';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findByUniId\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findByUniId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUniId(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/delete')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/update')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Patch, Post, Query } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Controller('users')\nexport class UsersController {\n\n  constructor(\n    private readonly userService: UsersService,\n  ) {}\n\n  @Get() \n  async getAll() {\n    return this.userService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    return this.userService.findOne(+id);\n  }\n\n  @Get()\n  async findByUniId(@Query('uniId') id: string) {\n    return this.userService.findByUniId(id);\n  }\n\n  @Post('create')\n  async create(@Body() dto: CreateUserDto) {\n    return this.userService.create(dto);\n  }\n  \n  @Patch(':id/update')\n  async update(@Param('id') id: string,@Body() dto: UpdateUserDto) {\n    return this.userService.update(+id, dto);\n  }\n\n  @Delete(':id/delete')\n  async remove(@Param('id') id: string) {\n    return this.userService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { DatabaseModule } from 'src/database/database.module';\n\n@Module({\n  providers: [UsersService],\n  controllers: [UsersController], \n  imports: [DatabaseModule]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByUniId\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: MySql2Database<>)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor for the UsersService class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    MySql2Database<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The MySql2Database instance for database operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:70\n                        \n                    \n\n\n            \n                \n                        Creates a new user based on the provided CreateUserDto.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The CreateUserDto containing user details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with a message indicating the user creation status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Retrieves all users from the database.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of all users in the database.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUniId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUniId(uniId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Retrieves a user based on the provided university ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uniId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The university ID of the user to retrieve.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user matching the specified university ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieves a user based on the provided user ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user to retrieve.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user matching the specified ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, dto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Updates an existing user based on the provided UpdateUserDto.\nOnly updates the fields that are provided in the dto.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user to update.\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The UpdateUserDto containing the updated user details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with a message indicating the user update status.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { MySql2Database } from 'drizzle-orm/mysql2';\nimport { MYSQL_CONNECTION } from 'src/constants';\nimport * as schema from '../database/schema';\nimport { users } from '../database/schema';\nimport { eq } from 'drizzle-orm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor for the UsersService class.\n   * \n   * @param db The MySql2Database instance for database operations.\n   */\n  constructor(\n    @Inject(MYSQL_CONNECTION)\n    private readonly db: MySql2Database, \n  ){}\n\n\n  /**\n   * Retrieves all users from the database.\n   * \n   * @returns An array of all users in the database.\n   */\n  async findAll() {\n    const allUsers = await this.db.select().from(users); \n\n    return allUsers; \n  }\n\n/**\n * Retrieves a user based on the provided user ID.\n * \n * @param id The ID of the user to retrieve.\n * @returns The user matching the specified ID.\n */\n  async findOne(id: number) {\n    const user = await this.db\n      .select()\n      .from(users)\n      .where(eq(users.id, id)); \n\n    return user; \n  }\n\n  /**\n   * Retrieves a user based on the provided university ID.\n   * \n   * @param uniId The university ID of the user to retrieve.\n   * @returns The user matching the specified university ID.\n   */\n  async findByUniId(uniId: string) {\n    const user = await this.db\n      .select()\n      .from(users)\n      .where(eq(users.uni_id, uniId)); \n\n    return user; \n  }\n\n  /**\n   * Creates a new user based on the provided CreateUserDto.\n   * \n   * @param dto The CreateUserDto containing user details.\n   * @returns An object with a message indicating the user creation status.\n   */\n  async create(dto: CreateUserDto) {\n    await this.db\n      .insert(users)\n      .values(dto); \n\n    return {\n      message: \"User Created\"\n    }\n  }\n\n  /**\n   * Updates an existing user based on the provided UpdateUserDto.\n   * Only updates the fields that are provided in the dto.\n   * \n   * @param id The ID of the user to update.\n   * @param dto The UpdateUserDto containing the updated user details.\n   * @returns An object with a message indicating the user update status.\n   */\n  async update(id: number, dto: UpdateUserDto) {\n    await this.db\n      .update(users)\n      .set({\n        ...dto,\n        updated_at: new Date(),\n      })\n      .where(eq(users.id, id)); \n\n      return {\n        message: \"User Updated\",\n      }\n  }\n\n  async remove(id: number) {\n    await this.db\n      .update(users)\n      .set({\n        deleted_at: new Date(), \n        updated_at: new Date(),\n      })\n      .where(eq(users.id, id)); \n\n    return {\n      message: \"User Removed\",\n    }\n\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/apartments/apartments.controller.ts\n            \n            controller\n            ApartmentsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/apartments/apartments.service.ts\n            \n            injectable\n            ApartmentsService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/apartments/dto/create-apartment.dto.ts\n            \n            class\n            CreateApartmentDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/constants/index.ts\n            \n            variable\n            MYSQL_CONNECTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            apartments\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            apartmentsRelations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            inspections\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            reservations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            reservationsRelations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            rooms\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            roomsRelations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            users\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            usersRelations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/reservations/dto/create-reservation.dto.ts\n            \n            class\n            CreateReservationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/reservations/reservations.controller.ts\n            \n            controller\n            ReservationsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/reservations/reservations.service.ts\n            \n            injectable\n            ReservationsService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                75 %\n                (6/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            drizzle-orm : ^0.34.1\n        \n            mysql2 : ^3.11.3\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApartmentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReservationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApartmentsModule\n\n\n\ncluster_ApartmentsModule_imports\n\n\n\ncluster_ApartmentsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ReservationsModule\n\n\n\ncluster_ReservationsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nApartmentsModule\n\nApartmentsModule\n\nApartmentsModule -->\n\nDatabaseModule->ApartmentsModule\n\n\n\n\n\nReservationsModule\n\nReservationsModule\n\nReservationsModule -->\n\nDatabaseModule->ReservationsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nApartmentsModule->AppModule\n\n\n\n\n\nApartmentsService\n\nApartmentsService\n\nApartmentsModule -->\n\nApartmentsService->ApartmentsModule\n\n\n\nAppModule -->\n\nReservationsModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nReservationsService\n\nReservationsService\n\nReservationsModule -->\n\nReservationsService->ReservationsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            apartments   (src/.../schema.ts)\n                        \n                        \n                            apartmentsRelations   (src/.../schema.ts)\n                        \n                        \n                            inspections   (src/.../schema.ts)\n                        \n                        \n                            MYSQL_CONNECTION   (src/.../index.ts)\n                        \n                        \n                            reservations   (src/.../schema.ts)\n                        \n                        \n                            reservationsRelations   (src/.../schema.ts)\n                        \n                        \n                            rooms   (src/.../schema.ts)\n                        \n                        \n                            roomsRelations   (src/.../schema.ts)\n                        \n                        \n                            users   (src/.../schema.ts)\n                        \n                        \n                            usersRelations   (src/.../schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        apartments\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysqlTable('apartments', {\n  id: int('id').primaryKey().autoincrement(),\n  floor: varchar('floor', { length: 2 }).notNull(),\n  number: int('number').notNull(),\n  for_male: boolean(`for_male`).notNull().default(true),\n  apartment_type: varchar('apartment_type', { length: 255 }).notNull(),\n  created_at: timestamp('created_at').notNull().defaultNow(),\n  updated_at: timestamp('updated_at').notNull().defaultNow(),\n  deleted_at: timestamp('deleted_at'),\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        apartmentsRelations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : relations(apartments, ({many}) => ({\n  rooms: many(rooms),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inspections\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysqlTable('inspections', {\n  id: int('id').primaryKey().autoincrement(),\n  reservation_id: int('reservation_id')\n    .references(() => reservations.id)\n    .notNull(), \n  inspection_date: timestamp('inspection_date').notNull(),\n  status: varchar('status', { length: 255 }).notNull().default('pending'),\n  created_at: timestamp('created_at').notNull().defaultNow(),\n  updated_at: timestamp('updated_at').notNull().defaultNow(),\n  deleted_at: timestamp('deleted_at')\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reservations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysqlTable('reservations', {\n  id: int('id').primaryKey().autoincrement(), \n  user_id: int('user_id')\n    .references(() => users.id)\n    .notNull(), \n  room_id: int('room_id')\n    .references(() => rooms.id)\n    .notNull(), \n  status: varchar('status', { length: 255 }).notNull().default('pending'),\n  semester: varchar('semester', { length: 255 }).notNull(),\n  year: varchar('year', { length: 4 }).notNull(),\n  created_at: timestamp('created_at').notNull().defaultNow(),\n  updated_at: timestamp('updated_at').notNull().defaultNow(),\n  deleted_at: timestamp('deleted_at'),\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reservationsRelations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : relations(reservations, ({many}) => ({\n  user: many(users),\n  room: many(rooms),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rooms\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysqlTable('rooms', {\n  id: int('id').primaryKey().autoincrement(), \n  apartment_id: int('apartment_id')\n    .references(() => apartments.id)\n    .notNull(), \n  room_number: varchar('room_number', { length: 3 }).notNull(),\n  is_available: boolean('is_available').notNull().default(true),\n  created_at: timestamp('created_at').notNull().defaultNow(),\n  updated_at: timestamp('updated_at').notNull().defaultNow(),\n  deleted_at: timestamp('deleted_at'),\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomsRelations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : relations(rooms, ({one}) => ({\n  apartment: one(apartments, {\n    fields: [rooms.apartment_id],\n    references: [apartments.id],\n  }),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysqlTable('users',{ \n  id: int('id').primaryKey().autoincrement(), \n  name: varchar('name', { length: 255 }).notNull(),\n  uni_id: varchar('uni_id', {length: 255}).unique().notNull(),\n  email: varchar('email', { length: 255 }).unique().notNull(),\n  image: varchar('image', { length: 255 }).notNull(),\n  role: varchar('role', { length: 255 }).notNull().default('resident'),\n  gender: boolean('gender').notNull().default(true), //true = male, false = female\n  has_deposit: boolean('has_deposit').notNull().default(false),\n  created_at: timestamp('created_at').notNull().defaultNow(),\n  updated_at: timestamp('updated_at').notNull().defaultNow(),\n  deleted_at: timestamp('deleted_at'),\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usersRelations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : relations(users, ({one}) => ({\n  reservation: one(reservations, {\n    fields: [users.id],\n    references: [reservations.user_id],\n  })\n}))\n                    \n                \n\n\n        \n    \n\n    src/constants/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MYSQL_CONNECTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'MYSQL_CONNECTION'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
