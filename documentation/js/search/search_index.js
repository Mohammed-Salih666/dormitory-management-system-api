var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/ApartmentsController.html",[0,1.261,1,1.796]],["body/controllers/ApartmentsController.html",[0,0.837,1,1.812,2,0.837,3,0.332,4,0.289,5,0.289,6,1.601,7,1.367,8,1.192,9,0.428,10,1.423,11,2.687,12,1.272,13,1.6,14,2.433,15,1.423,16,2.433,17,1.423,18,1.423,19,0.937,20,2.161,21,2.264,22,0.043,23,2.077,24,1.626,25,1.956,26,2.264,27,1.813,28,1.305,29,2.264,30,2.178,31,2.264,32,2.544,33,1.956,34,1.998,35,1.956,36,2.513,37,2.513,38,3.556,39,4.99,40,1.601,41,2.973,42,1.956,43,1.601,44,2.333,45,2.973,46,1.956,47,2.969,48,1.601,49,2.973,50,1.956,51,1.601,52,2.973,53,1.956,54,1.601,55,2.191,56,2.973,57,1.956,58,0.611,59,1.367,60,1.367,61,1.192,62,0.937,63,2.077,64,1.601,65,0.482,66,1.423,67,1.601,68,0.937,69,1.601,70,1.956,71,0.332,72,0.105,73,0.937,74,0.937,75,0.937,76,1.956,77,1.956,78,1.935,79,3.287,80,1.722,81,2.943,82,2.023,83,1.956,84,1.956,85,4.016,86,1.956,87,1.956,88,1.956,89,1.956,90,1.956,91,1.956,92,1.367,93,1.956,94,1.956,95,1.956,96,1.956,97,1.956,98,0.021,99,0.021]],["title/modules/ApartmentsModule.html",[100,0.814,101,1.586]],["body/modules/ApartmentsModule.html",[1,3.048,2,1.953,3,0.614,4,0.534,5,0.534,22,0.042,58,0.893,65,0.89,66,2.649,67,2.957,71,0.614,72,0.194,98,0.033,99,0.033,100,1.38,101,3.058,102,1.385,103,1.546,104,1.944,105,1.944,106,1.546,107,2.394,108,1.73,109,2.957,110,2.957,111,2.957,112,2.121,113,2.456,114,1.944,115,1.944,116,3.613,117,2.781,118,3.613,119,2.525]],["title/injectables/ApartmentsService.html",[66,1.411,120,1.261]],["body/injectables/ApartmentsService.html",[3,0.193,4,0.168,5,0.168,8,1.788,9,0.249,10,0.92,11,2.446,12,0.822,13,1.034,14,1.573,15,0.92,16,1.573,17,0.92,18,1.404,19,0.92,20,2.142,22,0.043,24,1.369,26,1.906,27,1.526,28,1.183,29,1.906,30,1.984,31,2.25,32,2.038,34,1.554,38,3.081,40,1.573,43,1.573,44,2.335,47,3.183,48,1.573,51,1.573,54,1.573,55,2.168,58,0.643,62,2.25,65,0.28,66,1.404,68,0.545,69,0.931,71,0.193,72,0.134,73,1.404,74,0.92,75,0.545,78,2.142,79,3.257,80,1.195,82,1.403,98,0.014,99,0.021,120,0.822,121,0.693,122,0.931,123,0.795,124,2.485,125,1.137,126,2.038,127,1.744,128,1.573,129,1.171,130,1.573,131,1.137,132,1.343,133,1.788,134,4.66,135,2.646,136,2.646,137,3.506,138,1.922,139,1.922,140,2.049,141,1.922,142,1.922,143,1.922,144,2.049,145,2.049,146,2.485,147,2.646,148,2.995,149,1.343,150,2.168,151,1.922,152,3.224,153,1.137,154,1.137,155,2.646,156,2.4,157,4.286,158,3.278,159,2.291,160,4.775,161,1.137,162,4.286,163,1.922,164,3.98,165,1.343,166,1.922,167,1.137,168,1.137,169,1.922,170,1.744,171,1.573,172,1.137,173,1.744,174,1.171,175,1.744,176,1.137,177,0.693,178,0.545,179,0.795,180,0.693,181,1.343,182,1.034,183,0.693,184,0.795,185,0.693,186,0.795,187,1.137,188,1.922,189,2.781,190,1.744,191,1.343,192,1.922,193,2.495,194,2.933,195,2.933,196,1.922,197,1.922,198,1.137,199,1.137,200,1.922,201,1.137,202,0.931,203,1.137,204,0.795,205,1.137,206,1.137,207,1.137,208,1.922,209,1.137,210,1.137,211,0.795,212,0.795,213,1.137,214,0.795,215,0.693,216,0.795,217,1.137,218,1.137,219,1.137,220,1.137,221,1.137,222,1.137,223,1.137,224,1.137]],["title/modules/AppModule.html",[100,0.814,225,1.796]],["body/modules/AppModule.html",[3,0.555,4,0.483,5,0.483,22,0.043,58,0.933,65,0.805,71,0.555,72,0.175,80,2.049,98,0.031,99,0.031,100,1.316,101,2.899,102,1.254,103,1.399,104,1.759,105,1.759,106,1.399,107,1.565,108,1.565,112,2.066,113,2.303,114,1.759,115,1.759,117,2.608,225,3.511,226,2.676,227,2.676,228,2.899,229,2.899,230,3.269,231,3.269,232,3.269,233,2.285,234,3.269,235,3.269,236,3.269,237,4.279,238,3.269,239,3.269,240,3.269,241,3.269,242,3.269,243,3.269,244,3.269]],["title/classes/CreateApartmentDto.html",[20,1.586,72,0.158]],["body/classes/CreateApartmentDto.html",[3,0.592,4,0.515,5,0.515,9,0.763,20,2.399,21,2.482,22,0.042,24,1.783,28,1.431,34,1.783,44,2.293,47,2.997,58,0.592,71,0.592,72,0.239,98,0.032,99,0.032,152,3.116,245,1.875,246,4.385,247,2.851,248,2.399,249,4.024,250,4.024,251,3.116,252,3.484,253,3.484,254,3.484,255,3.484,256,2.851,257,3.484,258,3.649,259,3.649,260,3.744,261,3.436,262,2.123]],["title/classes/CreateReservationDto.html",[72,0.158,263,1.586]],["body/classes/CreateReservationDto.html",[3,0.594,4,0.516,5,0.516,9,0.765,21,2.484,22,0.042,24,1.785,28,1.432,34,1.785,44,2.221,58,0.594,71,0.594,72,0.239,98,0.032,99,0.032,245,1.88,248,2.404,251,3.121,256,3.656,259,4.03,260,3.747,261,3.441,262,2.13,263,2.404,264,4.389,265,2.86,266,4.03,267,4.03,268,4.03,269,4.03,270,3.494,271,3.494,272,3.494,273,3.494]],["title/classes/CreateUserDto.html",[72,0.158,274,1.411]],["body/classes/CreateUserDto.html",[3,0.535,4,0.465,5,0.465,9,0.689,21,2.552,22,0.042,24,1.833,27,1.795,28,1.471,34,1.941,58,0.709,71,0.535,72,0.224,98,0.03,99,0.03,152,2.915,245,1.693,248,2.245,251,2.915,258,3.83,260,3.624,261,3.483,262,1.918,274,1.997,275,4.451,276,2.199,277,3.83,278,3.83,279,3.83,280,3.83,281,3.83,282,3.146,283,3.146,284,3.146,285,4.68,286,3.146,287,3.146,288,3.146,289,3.146,290,3.146,291,4.172,292,3.146,293,2.575,294,3.146,295,3.146]],["title/modules/DatabaseModule.html",[100,0.814,112,1.13]],["body/modules/DatabaseModule.html",[3,0.563,4,0.49,5,0.49,11,1.588,22,0.043,36,2.317,58,0.919,65,0.817,71,0.563,72,0.178,78,2.911,80,1.588,82,1.419,98,0.031,99,0.031,100,1.192,102,1.271,107,1.588,108,1.588,112,1.656,129,2.632,177,2.021,178,2.299,180,2.927,182,2.324,183,2.021,212,2.317,233,2.317,296,3.316,297,5.087,298,4.318,299,3.316,300,3.316,301,3.316,302,3.316,303,4.318,304,3.316,305,2.632,306,3.316,307,3.316,308,4.318,309,3.316,310,4.318,311,3.316,312,3.316,313,3.316,314,3.316,315,3.316,316,3.316,317,3.316,318,2.714]],["title/controllers/ReservationsController.html",[0,1.261,319,1.796]],["body/controllers/ReservationsController.html",[0,1.184,2,1.184,3,0.47,4,0.409,5,0.409,7,1.933,9,0.606,10,1.831,12,1.636,13,2.544,15,1.831,17,1.831,18,1.831,19,1.324,21,2.376,22,0.043,23,2.672,24,1.706,26,2.263,27,1.813,28,1.305,29,2.263,30,2.457,31,2.376,34,1.871,55,2.671,58,0.745,59,1.933,60,1.933,61,1.686,62,1.324,63,2.672,65,0.682,68,1.324,71,0.47,72,0.148,73,1.324,74,1.324,75,1.324,82,2.123,92,1.933,98,0.027,99,0.027,263,2.544,319,2.331,320,2.264,321,1.686,322,2.766,323,2.766,324,2.264,325,3.824,326,2.766,327,3.129,328,1.686,329,3.824,330,2.766,331,2.544,332,1.686,333,3.129,334,2.766,335,1.831,336,2.264,337,2.264,338,2.766,339,2.766,340,2.766,341,2.766,342,2.766,343,2.766,344,2.264,345,2.766,346,2.264,347,2.766]],["title/modules/ReservationsModule.html",[100,0.814,228,1.586]],["body/modules/ReservationsModule.html",[2,1.953,3,0.614,4,0.534,5,0.534,22,0.042,58,0.893,65,0.89,71,0.614,72,0.194,98,0.033,99,0.033,100,1.38,102,1.385,103,1.546,104,1.944,105,1.944,106,1.546,107,2.394,108,1.73,112,2.121,113,2.456,114,1.944,115,1.944,117,2.781,119,2.525,228,3.058,319,3.048,335,2.649,336,2.957,348,2.957,349,3.613,350,2.957,351,3.613,352,3.613]],["title/injectables/ReservationsService.html",[120,1.261,335,1.411]],["body/injectables/ReservationsService.html",[3,0.278,4,0.241,5,0.241,9,0.358,10,1.238,11,2.499,12,1.106,13,1.963,15,1.238,17,1.238,18,2.023,19,1.238,22,0.043,24,1.453,26,1.902,27,1.523,28,1.097,29,1.902,30,2.262,31,2.317,32,2.138,44,2.022,55,2.698,58,0.752,61,1.575,62,1.902,65,0.402,68,0.782,71,0.278,72,0.088,73,1.238,74,0.782,75,0.782,78,1.391,80,1.238,82,1.7,98,0.019,99,0.026,120,1.106,121,0.996,123,1.141,124,2.548,126,1.963,127,1.806,129,2.223,132,1.806,133,2.223,135,2.953,136,3.207,140,1.141,144,2.548,145,2.548,146,2.953,147,3.302,148,2.953,149,1.806,150,2.575,155,2.548,159,1.806,165,1.806,170,1.806,171,2.115,173,2.548,174,1.575,175,2.241,177,0.996,178,0.782,179,1.141,180,0.996,181,1.806,182,1.391,183,0.996,184,1.141,185,0.996,186,1.141,189,2.776,190,2.548,191,1.141,211,1.141,214,1.806,215,0.996,216,2.548,263,2.47,305,2.698,321,2.422,324,2.115,327,2.625,328,1.575,331,2.837,332,1.575,335,1.238,337,1.337,353,1.337,354,1.633,355,1.633,356,4.647,357,1.633,358,1.633,359,2.585,360,1.633,361,3.647,362,2.585,363,2.585,364,2.241,365,2.585,366,2.585,367,1.633,368,1.633,369,2.585,370,1.633,371,1.633,372,1.633,373,1.633,374,1.633,375,1.337,376,2.585,377,2.585,378,1.337]],["title/classes/UpdateUserDto.html",[72,0.158,379,1.586]],["body/classes/UpdateUserDto.html",[3,0.713,4,0.62,5,0.62,12,1.796,22,0.042,58,0.85,71,0.713,72,0.225,98,0.036,99,0.036,245,2.259,274,2.009,276,2.933,379,2.692,380,3.435,381,5.002,382,5.002,383,2.933,384,4.197,385,3.435,386,3.435]],["title/controllers/UsersController.html",[0,1.261,387,1.796]],["body/controllers/UsersController.html",[0,1.05,2,1.05,3,0.417,4,0.362,5,0.362,7,1.714,9,0.537,10,1.682,11,2.732,12,1.503,15,1.682,17,1.682,18,1.682,19,1.174,21,2.363,22,0.043,23,2.455,24,1.698,26,2.271,27,1.819,28,1.309,29,2.271,30,2.363,31,2.363,32,2.657,34,1.87,58,0.762,59,1.714,60,1.714,61,1.495,62,1.174,63,1.714,64,2.007,65,0.604,68,1.174,71,0.417,72,0.131,73,1.174,74,1.174,75,1.174,82,2.112,92,1.714,98,0.025,99,0.025,274,2.146,328,1.495,331,2.798,332,1.495,333,2.875,344,2.007,346,2.007,379,2.412,383,2.455,387,2.141,388,2.007,389,1.495,390,2.875,391,4.482,392,2.453,393,2.453,394,2.453,395,2.007,396,3.513,397,2.453,398,2.453,399,3.513,400,2.453,401,2.453,402,1.682,403,2.007,404,2.007,405,2.453,406,2.453,407,2.453,408,2.453,409,2.453,410,2.453,411,2.453,412,2.453,413,2.453,414,2.453,415,2.453]],["title/modules/UsersModule.html",[100,0.814,229,1.586]],["body/modules/UsersModule.html",[2,1.953,3,0.614,4,0.534,5,0.534,22,0.042,58,0.893,65,0.89,71,0.614,72,0.194,98,0.033,99,0.033,100,1.38,102,1.385,103,1.546,104,1.944,105,1.944,106,1.546,107,2.394,108,1.73,112,2.121,113,2.456,114,1.944,115,1.944,117,2.781,119,2.525,229,3.058,387,3.048,402,2.649,403,2.957,416,2.957,417,3.613,418,2.957,419,3.613,420,3.613]],["title/injectables/UsersService.html",[120,1.261,402,1.411]],["body/injectables/UsersService.html",[3,0.258,4,0.224,5,0.224,9,0.333,10,1.168,11,2.531,12,1.044,13,1.883,15,1.168,17,1.168,18,1.959,19,1.168,22,0.043,24,1.479,26,1.959,27,1.569,28,1.129,29,1.959,30,2.209,31,2.316,32,2.202,34,1.051,44,1.974,58,0.76,62,1.959,65,0.374,68,0.727,71,0.258,72,0.164,73,1.675,74,0.727,75,0.727,78,1.645,82,1.751,98,0.018,99,0.029,120,1.044,121,0.926,123,1.061,124,2.86,126,2.062,127,2.136,128,1.996,129,2.494,130,1.996,132,1.704,133,2.336,135,3.124,136,3.308,144,2.445,145,2.445,146,2.445,147,3.005,148,2.445,149,1.704,150,2.133,155,2.86,159,1.704,165,2.445,170,1.704,173,2.445,174,1.487,175,2.136,177,0.926,178,0.727,179,1.061,180,0.926,181,1.704,182,1.313,183,0.926,184,1.061,185,0.926,186,1.061,189,3.005,190,2.678,191,1.704,211,1.061,214,1.704,215,1.487,216,2.136,274,2.141,305,3.468,328,1.487,331,2.938,332,1.487,364,1.061,375,1.243,378,1.243,379,2.406,383,1.704,389,2.336,390,1.996,395,1.996,402,1.675,404,1.243,421,1.243,422,1.519,423,1.519,424,1.519,425,2.439,426,1.519,427,4.092,428,3.056,429,3.499,430,1.519,431,1.519,432,1.519,433,2.439,434,1.519,435,2.439,436,3.056,437,1.519,438,1.519,439,2.439,440,1.519]],["title/coverage.html",[441,2.791]],["body/coverage.html",[0,1.953,1,1.824,5,0.442,6,2.45,8,1.824,20,1.611,22,0.042,28,0.826,66,1.433,72,0.262,98,0.029,99,0.029,106,1.281,120,1.953,122,2.45,133,1.824,137,2.092,178,1.433,212,4.083,246,2.45,247,2.45,263,1.611,264,2.45,265,2.45,274,1.433,275,2.45,276,2.82,319,1.824,320,2.45,321,1.824,335,1.433,353,2.45,379,1.611,380,2.45,387,1.824,388,2.45,389,1.824,402,1.433,421,2.45,441,2.092,442,2.993,443,2.993,444,2.993,445,2.993,446,2.993,447,2.993,448,4.035,449,2.45,450,5.592,451,5.684,452,4.528,453,2.45,454,2.45,455,2.45,456,2.45,457,2.45,458,2.45,459,2.993,460,2.993,461,2.993,462,2.993,463,4.035,464,2.993,465,2.993,466,2.993,467,2.993]],["title/dependencies.html",[103,1.514,468,2.026]],["body/dependencies.html",[22,0.043,65,0.988,72,0.261,98,0.035,99,0.035,103,1.716,182,2.158,185,2.444,233,2.802,262,2.444,385,3.282,386,3.282,469,5.24,470,4.01,471,4.01,472,4.01,473,4.01,474,4.01,475,4.01,476,4.01,477,4.01,478,4.01,479,4.01,480,4.01,481,4.01,482,4.01,483,4.01,484,4.01,485,4.01]],["title/miscellaneous/enumerations.html",[486,1.185,487,2.895]],["body/miscellaneous/enumerations.html",[9,0.946,22,0.041,37,3.781,98,0.037,99,0.037,293,4.165,486,2.069,487,3.536,488,4.321,489,4.321,490,5.089,491,5.089,492,5.089]],["title/miscellaneous/functions.html",[486,1.185,493,2.895]],["body/miscellaneous/functions.html",[9,0.987,22,0.037,98,0.037,99,0.037,106,2.355,458,3.686,486,2.157,493,3.686,494,4.504]],["title/index.html",[9,0.542,495,2.476,496,2.476]],["body/index.html",[4,0.501,22,0.042,98,0.031,99,0.031,126,1.826,318,3.587,441,2.371,497,3.393,498,3.393,499,4.383,500,3.393,501,3.393,502,3.393,503,3.393,504,3.393,505,3.393,506,4.855,507,3.393,508,3.393,509,3.393,510,3.393,511,4.855,512,5.537,513,3.393,514,3.393,515,3.393,516,5.442,517,3.393,518,3.393,519,3.393,520,3.393,521,3.393,522,3.393,523,4.383,524,4.383,525,3.393,526,3.393,527,3.393,528,4.383,529,4.383,530,3.393,531,3.393,532,3.393,533,3.393,534,3.393,535,2.777,536,3.393,537,3.393,538,3.393,539,3.393,540,3.393,541,3.393,542,3.393,543,3.393,544,3.393,545,3.393,546,3.393,547,3.393,548,3.393,549,3.393,550,3.393,551,2.777]],["title/modules.html",[102,1.531]],["body/modules.html",[22,0.036,98,0.036,99,0.036,101,2.275,102,1.621,112,1.621,156,3.46,225,2.577,228,2.275,229,2.275,535,4.539,552,5.546,553,5.546,554,5.664,555,4.227]],["title/overview.html",[556,3.268]],["body/overview.html",[2,1.486,22,0.042,66,2.351,98,0.032,99,0.032,100,0.959,101,2.996,102,1.332,103,1.486,104,1.869,105,1.869,106,1.486,107,1.663,108,1.663,109,2.843,110,2.843,111,2.843,112,2.1,113,2.395,114,1.869,115,1.869,121,2.117,204,3.11,225,3.499,226,2.843,227,2.843,228,2.996,229,2.996,245,1.869,335,2.351,348,2.843,350,2.843,402,2.351,416,2.843,418,2.843,556,2.843,557,3.473,558,2.843]],["title/properties.html",[248,1.903,468,2.026]],["body/properties.html",[22,0.042,98,0.037,99,0.037,126,2.396,248,2.396,551,3.644,559,4.453,560,4.453,561,4.453,562,4.453]],["title/miscellaneous/variables.html",[486,1.185,563,2.895]],["body/miscellaneous/variables.html",[8,1.986,9,0.484,22,0.043,27,0.848,28,0.61,34,0.761,36,3.666,37,3.666,38,1.545,44,0.946,47,1.348,80,1.059,81,1.81,98,0.023,99,0.023,134,1.81,137,2.704,140,1.545,150,1.986,174,1.986,178,1.853,202,1.81,204,1.545,215,2.774,249,1.81,250,1.81,266,1.81,267,1.81,268,1.81,269,1.81,277,1.81,278,1.81,279,1.81,280,1.81,281,1.81,305,1.348,321,1.986,331,2.45,356,1.81,364,3.181,389,1.986,449,1.81,452,1.81,453,2.667,454,2.667,455,2.667,456,2.667,457,2.667,486,1.059,558,1.81,563,1.81,564,5.158,565,2.211,566,2.211,567,4.552,568,2.211,569,5.383,570,5.32,571,2.211,572,2.211,573,2.211,574,5.053,575,4.552,576,4.552,577,4.552,578,4.552,579,2.211,580,3.259,581,3.259,582,2.211,583,2.211,584,2.211,585,4.762,586,2.211,587,2.211,588,2.211,589,3.259,590,3.259,591,2.211,592,2.211,593,3.259,594,2.211,595,2.211,596,2.211,597,2.211,598,2.211,599,2.211,600,2.211,601,2.211,602,2.211,603,3.259,604,2.211,605,2.211,606,2.211,607,2.211,608,2.211,609,3.259,610,2.211,611,2.211,612,2.211,613,2.211,614,2.211,615,2.211,616,2.211,617,2.211,618,2.211,619,2.211,620,2.211,621,2.211,622,2.211,623,2.211,624,2.211,625,2.211,626,2.211,627,2.211]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":212,"title":{},"body":{"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"coverage.html":{}}}],["0.0.1",{"_index":560,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["0.34.1",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":463,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":205,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["10",{"_index":315,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["10.0.0",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":202,"title":{},"body":{"injectables/ApartmentsService.html":{},"miscellaneous/variables.html":{}}}],["2.0.5",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["255",{"_index":574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["255}).unique().notnull",{"_index":615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":204,"title":{},"body":{"injectables/ApartmentsService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["3.11.3",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":558,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["404",{"_index":222,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["5",{"_index":557,"title":{},"body":{"overview.html":{}}}],["5/7",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["7/9",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":446,"title":{},"body":{"coverage.html":{}}}],["admin",{"_index":491,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ali",{"_index":547,"title":{},"body":{"index.html":{}}}],["allapartments",{"_index":188,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["allreservations",{"_index":369,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["allusers",{"_index":433,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":536,"title":{},"body":{"index.html":{}}}],["apartment",{"_index":134,"title":{},"body":{"injectables/ApartmentsService.html":{},"miscellaneous/variables.html":{}}}],["apartment.dto",{"_index":69,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["apartment.dto.ts",{"_index":247,"title":{},"body":{"classes/CreateApartmentDto.html":{},"coverage.html":{}}}],["apartment.dto.ts:10",{"_index":257,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment.dto.ts:14",{"_index":255,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment.dto.ts:18",{"_index":252,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment.dto.ts:6",{"_index":253,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment_id",{"_index":601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apartment_type",{"_index":249,"title":{},"body":{"classes/CreateApartmentDto.html":{},"miscellaneous/variables.html":{}}}],["apartmentnumber",{"_index":160,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["apartments",{"_index":8,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apartments.controller",{"_index":118,"title":{},"body":{"modules/ApartmentsModule.html":{}}}],["apartments.id",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apartments.service",{"_index":67,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{}}}],["apartments/apartments.module",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["apartmentscontroller",{"_index":1,"title":{"controllers/ApartmentsController.html":{}},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"coverage.html":{}}}],["apartmentservice",{"_index":76,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["apartmentsmodule",{"_index":101,"title":{"modules/ApartmentsModule.html":{}},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apartmentsrelations",{"_index":453,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apartmentsservice",{"_index":66,"title":{"injectables/ApartmentsService.html":{}},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"coverage.html":{},"overview.html":{}}}],["app",{"_index":514,"title":{},"body":{"index.html":{}}}],["applications",{"_index":505,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":225,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":159,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["assigned",{"_index":141,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["author",{"_index":562,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":546,"title":{},"body":{"index.html":{}}}],["available",{"_index":156,"title":{},"body":{"injectables/ApartmentsService.html":{},"modules.html":{}}}],["await",{"_index":189,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":537,"title":{},"body":{"index.html":{}}}],["based",{"_index":135,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["body",{"_index":63,"title":{},"body":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":152,"title":{},"body":{"injectables/ApartmentsService.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateUserDto.html":{}}}],["boolean('gender').notnull().default(true",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean('has_deposit').notnull().default(false",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean('is_available').notnull().default(true",{"_index":607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean(`for_male`).notnull().default(true",{"_index":572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":106,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":554,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":552,"title":{},"body":{"modules.html":{}}}],["building",{"_index":500,"title":{},"body":{"index.html":{}}}],["cache",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["class",{"_index":72,"title":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":245,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["cluster_apartmentsmodule",{"_index":109,"title":{},"body":{"modules/ApartmentsModule.html":{},"overview.html":{}}}],["cluster_apartmentsmodule_imports",{"_index":110,"title":{},"body":{"modules/ApartmentsModule.html":{},"overview.html":{}}}],["cluster_apartmentsmodule_providers",{"_index":111,"title":{},"body":{"modules/ApartmentsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_reservationsmodule",{"_index":348,"title":{},"body":{"modules/ReservationsModule.html":{},"overview.html":{}}}],["cluster_reservationsmodule_imports",{"_index":349,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["cluster_reservationsmodule_providers",{"_index":350,"title":{},"body":{"modules/ReservationsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":416,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":417,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":418,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["condition",{"_index":196,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["config/database.config",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":297,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_host",{"_index":304,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_name",{"_index":307,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_password",{"_index":309,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_port",{"_index":311,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_username",{"_index":306,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["connectionlimit",{"_index":314,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["const",{"_index":78,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["constants",{"_index":300,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["constructor",{"_index":73,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(db",{"_index":123,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["containing",{"_index":144,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["controller",{"_index":0,"title":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('apartments",{"_index":70,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["controller('reservations",{"_index":338,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["controller('users",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":441,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":12,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":92,"title":{},"body":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["create(dto",{"_index":19,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createapartmentdto",{"_index":20,"title":{"classes/CreateApartmentDto.html":{}},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"classes/CreateApartmentDto.html":{},"coverage.html":{}}}],["created",{"_index":375,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["created_at",{"_index":575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpool",{"_index":298,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["createreservationdto",{"_index":263,"title":{"classes/CreateReservationDto.html":{}},"body":{"classes/CreateReservationDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"coverage.html":{}}}],["creates",{"_index":132,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":274,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creation",{"_index":149,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["criteria",{"_index":166,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["current",{"_index":366,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["database",{"_index":129,"title":{},"body":{"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["database/database.module",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["database/schema",{"_index":181,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["databaseconfig",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":112,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":216,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["db",{"_index":127,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["declarations",{"_index":105,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":21,"title":{},"body":{"controllers/ApartmentsController.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":36,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":24,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":61,"title":{},"body":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{}}}],["delete(':floor/:number/delete",{"_index":52,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["delete(':id/delete",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id/remove",{"_index":329,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["deleted_at",{"_index":364,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["deletes",{"_index":362,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["dependencies",{"_index":103,"title":{"dependencies.html":{}},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":126,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":145,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["determined",{"_index":138,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["development",{"_index":515,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":442,"title":{},"body":{"coverage.html":{}}}],["drizzle",{"_index":182,"title":{},"body":{"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["drizzle(pool",{"_index":317,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dto",{"_index":30,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.apartment_type",{"_index":200,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["dto/create",{"_index":68,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":525,"title":{},"body":{"index.html":{}}}],["each",{"_index":139,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["economy",{"_index":203,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["efficient",{"_index":501,"title":{},"body":{"index.html":{}}}],["email",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["enumerations",{"_index":487,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":243,"title":{},"body":{"modules/AppModule.html":{}}}],["eq",{"_index":184,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["eq(apartments.floor",{"_index":194,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["eq(apartments.for_male",{"_index":193,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["eq(apartments.number",{"_index":195,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["eq(reservations.id",{"_index":377,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["eq(reservations.user_id",{"_index":373,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["eq(schema.rooms.is_available",{"_index":198,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["example",{"_index":511,"title":{},"body":{"index.html":{}}}],["existing",{"_index":170,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["export",{"_index":71,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":108,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":381,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["false",{"_index":81,"title":{},"body":{"controllers/ApartmentsController.html":{},"miscellaneous/variables.html":{}}}],["female",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["field",{"_index":365,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["fields",{"_index":174,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":13,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["findall(@query('gender",{"_index":77,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["findall(formale",{"_index":151,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["findall(gender",{"_index":33,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["findavailablerooms",{"_index":14,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["findavailablerooms(@query('gender",{"_index":90,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["findavailablerooms(gender",{"_index":40,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["findbyuniid",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyuniid(@query('uniid",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyuniid(id",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyuniid(uniid",{"_index":425,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":15,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('floor",{"_index":84,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["findone(@param('id",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(@param('user_id",{"_index":341,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["findone(floor",{"_index":43,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["findone(id",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(userid",{"_index":324,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["findroomsbyapartment",{"_index":16,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["findroomsbyapartment(@param('floor",{"_index":88,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["findroomsbyapartment(floor",{"_index":48,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["floor",{"_index":47,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"classes/CreateApartmentDto.html":{},"miscellaneous/variables.html":{}}}],["for(let",{"_index":223,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["for_male",{"_index":250,"title":{},"body":{"classes/CreateApartmentDto.html":{},"miscellaneous/variables.html":{}}}],["formale",{"_index":79,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["found",{"_index":221,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["framework",{"_index":499,"title":{},"body":{"index.html":{}}}],["from(apartments",{"_index":192,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["from(reservations",{"_index":370,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["from(users",{"_index":435,"title":{},"body":{"injectables/UsersService.html":{}}}],["function",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":493,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":38,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"miscellaneous/variables.html":{}}}],["get(':id",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':user_id",{"_index":325,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["get('available",{"_index":41,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["get('floor/:floor/number/:number",{"_index":45,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["get('floor/:floor/number/:number/rooms",{"_index":49,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["getall",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["getting",{"_index":495,"title":{"index.html":{}},"body":{}}],["given",{"_index":157,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["graph",{"_index":555,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":532,"title":{},"body":{"index.html":{}}}],["has_deposit",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["here",{"_index":543,"title":{},"body":{"index.html":{}}}],["host",{"_index":303,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["httpexception",{"_index":176,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["httpexception(\"apartment",{"_index":220,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["i=0",{"_index":224,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["id",{"_index":331,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":443,"title":{},"body":{"coverage.html":{}}}],["if(!apartment",{"_index":218,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["image",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["import",{"_index":58,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":117,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":148,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":177,"title":{},"body":{"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["inject(mysql_connection",{"_index":186,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":120,"title":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":121,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["insert(apartments",{"_index":210,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["insert(reservations",{"_index":374,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["insert(users",{"_index":438,"title":{},"body":{"injectables/UsersService.html":{}}}],["inspection_date",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inspections",{"_index":454,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["installation",{"_index":510,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":513,"title":{},"body":{"index.html":{}}}],["instance",{"_index":128,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/UsersService.html":{}}}],["int('apartment_id",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["int('id').primarykey().autoincrement",{"_index":567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["int('number').notnull",{"_index":571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["int('reservation_id",{"_index":584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["int('room_id",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["int('user_id",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_available",{"_index":606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isboolean",{"_index":258,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateUserDto.html":{}}}],["isboolean()@isnotempty",{"_index":254,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["isemail",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isin(object.values(roles",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isint",{"_index":259,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{}}}],["isint()@isnotempty",{"_index":256,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{}}}],["isnotempty",{"_index":260,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{}}}],["isnull",{"_index":368,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["isstring",{"_index":261,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isin(undefined)@isnotempty",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":251,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{}}}],["isurl",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":539,"title":{},"body":{"index.html":{}}}],["legend",{"_index":104,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":551,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":529,"title":{},"body":{"index.html":{}}}],["load",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["located",{"_index":164,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["m",{"_index":39,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["male",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["males",{"_index":158,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["many",{"_index":580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["many(rooms",{"_index":581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["many(users",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":99,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":147,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":486,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":528,"title":{},"body":{"index.html":{}}}],["mode",{"_index":318,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["module",{"_index":100,"title":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":102,"title":{"modules.html":{}},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mohammed",{"_index":549,"title":{},"body":{"index.html":{}}}],["more",{"_index":542,"title":{},"body":{"index.html":{}}}],["muhsin",{"_index":548,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["mysql2/promise",{"_index":299,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mysql2database",{"_index":124,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["mysql_connection",{"_index":178,"title":{},"body":{"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mysqltable('apartments",{"_index":566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysqltable('inspections",{"_index":582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysqltable('reservations",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysqltable('rooms",{"_index":600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysqltable('users",{"_index":612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":27,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"classes/CreateUserDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":506,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":65,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":233,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":385,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":133,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["node.js",{"_index":498,"title":{},"body":{"index.html":{}}}],["notnull",{"_index":570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notnull().default('pending",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notnull().default('resident",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["npm",{"_index":512,"title":{},"body":{"index.html":{}}}],["number",{"_index":44,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":146,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["one",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one(apartments",{"_index":610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one(reservations",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["open",{"_index":530,"title":{},"body":{"index.html":{}}}],["operations",{"_index":130,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/UsersService.html":{}}}],["optional",{"_index":29,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["orm",{"_index":185,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["orm/mysql2",{"_index":183,"title":{},"body":{"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":115,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":556,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":468,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":62,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('number",{"_index":85,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["parameters",{"_index":26,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partial",{"_index":55,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["partialtype",{"_index":384,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":382,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":308,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["patch",{"_index":60,"title":{},"body":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':floor/:number/update",{"_index":56,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["patch(':id/update",{"_index":333,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["please",{"_index":540,"title":{},"body":{"index.html":{}}}],["pool",{"_index":312,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["port",{"_index":310,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["post",{"_index":59,"title":{},"body":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["post('create",{"_index":23,"title":{},"body":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["preference",{"_index":163,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/ApartmentsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":74,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":520,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":497,"title":{},"body":{"index.html":{}}}],["project",{"_index":531,"title":{},"body":{"index.html":{}}}],["properties",{"_index":248,"title":{"properties.html":{}},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"properties.html":{}}}],["provide",{"_index":301,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["provided",{"_index":136,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":107,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["query",{"_index":64,"title":{},"body":{"controllers/ApartmentsController.html":{},"controllers/UsersController.html":{}}}],["query('gender",{"_index":86,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["queuelimit",{"_index":316,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["read",{"_index":541,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":75,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["references",{"_index":585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["relations(apartments",{"_index":579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relations(reservations",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relations(rooms",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relations(users",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["removal",{"_index":171,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{}}}],["remove",{"_index":17,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('floor",{"_index":96,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["remove(@param('id",{"_index":346,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["remove(floor",{"_index":51,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["remove(id",{"_index":328,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["removed",{"_index":378,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["removes",{"_index":169,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["repository",{"_index":509,"title":{},"body":{"index.html":{}}}],["reservation",{"_index":356,"title":{},"body":{"injectables/ReservationsService.html":{},"miscellaneous/variables.html":{}}}],["reservation.dto",{"_index":337,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["reservation.dto.ts",{"_index":265,"title":{},"body":{"classes/CreateReservationDto.html":{},"coverage.html":{}}}],["reservation.dto.ts:11",{"_index":270,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:15",{"_index":271,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:19",{"_index":273,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:7",{"_index":272,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation_id",{"_index":583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reservations",{"_index":321,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reservations.controller",{"_index":352,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["reservations.id",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reservations.service",{"_index":336,"title":{},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{}}}],["reservations.user_id",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reservations/reservations.module",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["reservationscontroller",{"_index":319,"title":{"controllers/ReservationsController.html":{}},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"coverage.html":{}}}],["reservationservice",{"_index":339,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["reservationsmodule",{"_index":228,"title":{"modules/ReservationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules.html":{},"overview.html":{}}}],["reservationsrelations",{"_index":455,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["reservationsservice",{"_index":335,"title":{"injectables/ReservationsService.html":{}},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"coverage.html":{},"overview.html":{}}}],["reset",{"_index":114,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["result",{"_index":209,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["results",{"_index":98,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":429,"title":{},"body":{"injectables/UsersService.html":{}}}],["retrieved",{"_index":359,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["retrieves",{"_index":155,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":82,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":31,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["role",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["roles",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["room",{"_index":140,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"miscellaneous/variables.html":{}}}],["room_id",{"_index":266,"title":{},"body":{"classes/CreateReservationDto.html":{},"miscellaneous/variables.html":{}}}],["room_number",{"_index":604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roomletter",{"_index":206,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["rooms",{"_index":137,"title":{},"body":{"injectables/ApartmentsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rooms.apartment_id",{"_index":611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rooms.id",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roomscount",{"_index":199,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["roomsrelations",{"_index":456,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":516,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["salih",{"_index":550,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":502,"title":{},"body":{"index.html":{}}}],["schema",{"_index":180,"title":{},"body":{"injectables/ApartmentsService.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["select",{"_index":191,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["semester",{"_index":267,"title":{},"body":{"classes/CreateReservationDto.html":{},"miscellaneous/variables.html":{}}}],["server",{"_index":503,"title":{},"body":{"index.html":{}}}],["set",{"_index":214,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["setting",{"_index":363,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["side",{"_index":504,"title":{},"body":{"index.html":{}}}],["soft",{"_index":361,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/ApartmentsController.html":{},"modules/ApartmentsModule.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["specific",{"_index":162,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["specified",{"_index":165,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["sponsors",{"_index":534,"title":{},"body":{"index.html":{}}}],["src/.../index.ts",{"_index":565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":494,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.enum.ts",{"_index":488,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../schema.ts",{"_index":564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/apartments/apartments.controller.ts",{"_index":6,"title":{},"body":{"controllers/ApartmentsController.html":{},"coverage.html":{}}}],["src/apartments/apartments.controller.ts:12",{"_index":35,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["src/apartments/apartments.controller.ts:19",{"_index":46,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["src/apartments/apartments.controller.ts:25",{"_index":50,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["src/apartments/apartments.controller.ts:30",{"_index":42,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["src/apartments/apartments.controller.ts:36",{"_index":25,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["src/apartments/apartments.controller.ts:41",{"_index":57,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["src/apartments/apartments.controller.ts:46",{"_index":53,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["src/apartments/apartments.module.ts",{"_index":116,"title":{},"body":{"modules/ApartmentsModule.html":{}}}],["src/apartments/apartments.service.ts",{"_index":122,"title":{},"body":{"injectables/ApartmentsService.html":{},"coverage.html":{}}}],["src/apartments/apartments.service.ts:110",{"_index":131,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["src/apartments/apartments.service.ts:149",{"_index":172,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["src/apartments/apartments.service.ts:175",{"_index":168,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["src/apartments/apartments.service.ts:20",{"_index":153,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["src/apartments/apartments.service.ts:45",{"_index":161,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["src/apartments/apartments.service.ts:67",{"_index":167,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["src/apartments/apartments.service.ts:89",{"_index":154,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["src/apartments/apartments.service.ts:9",{"_index":125,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["src/apartments/dto/create",{"_index":246,"title":{},"body":{"classes/CreateApartmentDto.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["src/constants",{"_index":179,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["src/constants/index.ts",{"_index":449,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/database.module",{"_index":119,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{}}}],["src/database/database.module.ts",{"_index":296,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/schema.ts",{"_index":452,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":458,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/reservations/dto/create",{"_index":264,"title":{},"body":{"classes/CreateReservationDto.html":{},"coverage.html":{}}}],["src/reservations/reservations.controller.ts",{"_index":320,"title":{},"body":{"controllers/ReservationsController.html":{},"coverage.html":{}}}],["src/reservations/reservations.controller.ts:13",{"_index":323,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/reservations/reservations.controller.ts:18",{"_index":326,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/reservations/reservations.controller.ts:23",{"_index":322,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/reservations/reservations.controller.ts:28",{"_index":334,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/reservations/reservations.controller.ts:33",{"_index":330,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/reservations/reservations.module.ts",{"_index":351,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["src/reservations/reservations.service.ts",{"_index":353,"title":{},"body":{"injectables/ReservationsService.html":{},"coverage.html":{}}}],["src/reservations/reservations.service.ts:20",{"_index":357,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:35",{"_index":358,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:53",{"_index":355,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:71",{"_index":367,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:9",{"_index":354,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:93",{"_index":360,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/users/dto/create",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":380,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:14",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:19",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:24",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:29",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:34",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:39",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":419,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":421,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:102",{"_index":431,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:11",{"_index":422,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":424,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:40",{"_index":430,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:55",{"_index":426,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:70",{"_index":423,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:88",{"_index":432,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/roles.enum",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/utils/roles.enum.ts",{"_index":489,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["standard",{"_index":201,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["start",{"_index":517,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":519,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":521,"title":{},"body":{"index.html":{}}}],["started",{"_index":496,"title":{"index.html":{}},"body":{}}],["starter",{"_index":508,"title":{},"body":{"index.html":{}}}],["starting",{"_index":143,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["statements",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":150,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["stay",{"_index":544,"title":{},"body":{"index.html":{}}}],["string",{"_index":34,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string,@body",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["student",{"_index":492,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["super_admin",{"_index":490,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["support",{"_index":535,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":553,"title":{},"body":{"modules.html":{}}}],["table",{"_index":467,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":466,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":524,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":527,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":526,"title":{},"body":{"index.html":{}}}],["tests",{"_index":523,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":533,"title":{},"body":{"index.html":{}}}],["this.apartmentservice.create(dto",{"_index":93,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["this.apartmentservice.findall(formale",{"_index":83,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["this.apartmentservice.findavailablerooms(formale",{"_index":91,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["this.apartmentservice.findone(floor",{"_index":87,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["this.apartmentservice.findroomsbyapartment(floor",{"_index":89,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["this.apartmentservice.remove(floor",{"_index":97,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["this.apartmentservice.update(floor",{"_index":95,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["this.db",{"_index":190,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["this.db.delete(users).where(eq(users.id",{"_index":440,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.db.query.apartments.findfirst",{"_index":217,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["this.db.query.apartments.findmany",{"_index":197,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["this.db.query.reservations.findfirst",{"_index":372,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.db.select().from(users",{"_index":434,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.db.transaction(async",{"_index":207,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["this.reservationservice.create(dto",{"_index":343,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationservice.findall",{"_index":340,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationservice.findone(+userid",{"_index":342,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationservice.remove(+id",{"_index":347,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationservice.update(+id",{"_index":345,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.userservice.create(dto",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findall",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findbyuniid(id",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findone(+id",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.remove(+id",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.update(+id",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":219,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["timestamp('created_at').notnull().defaultnow",{"_index":576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timestamp('deleted_at",{"_index":578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timestamp('inspection_date').notnull",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timestamp('updated_at').notnull().defaultnow",{"_index":577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["touch",{"_index":545,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":80,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"miscellaneous/variables.html":{}}}],["tx",{"_index":208,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["type",{"_index":28,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":386,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":507,"title":{},"body":{"index.html":{}}}],["uni_id",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["uniid",{"_index":428,"title":{},"body":{"injectables/UsersService.html":{}}}],["unique",{"_index":142,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["unique().notnull",{"_index":617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unit",{"_index":522,"title":{},"body":{"index.html":{}}}],["university",{"_index":427,"title":{},"body":{"injectables/UsersService.html":{}}}],["unknown",{"_index":32,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":561,"title":{},"body":{"properties.html":{}}}],["update",{"_index":18,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('floor",{"_index":94,"title":{},"body":{"controllers/ApartmentsController.html":{}}}],["update(@param('id",{"_index":344,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["update(apartments",{"_index":213,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["update(floor",{"_index":54,"title":{},"body":{"controllers/ApartmentsController.html":{},"injectables/ApartmentsService.html":{}}}],["update(id",{"_index":332,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(reservations",{"_index":376,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["update(users",{"_index":439,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated",{"_index":175,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["updated_at",{"_index":215,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["updates",{"_index":173,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":379,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usefactory",{"_index":302,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["user",{"_index":305,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":383,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:16",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user_id",{"_index":268,"title":{},"body":{"classes/CreateReservationDto.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":327,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["users",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users.controller",{"_index":420,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.id",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users.service",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":387,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersmodule",{"_index":229,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrelations",{"_index":457,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersservice",{"_index":402,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["validator",{"_index":262,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":37,"title":{},"body":{"controllers/ApartmentsController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values(dto",{"_index":211,"title":{},"body":{"injectables/ApartmentsService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["varchar('apartment_type",{"_index":573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('email",{"_index":616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('floor",{"_index":568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('image",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('name",{"_index":613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('role",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('room_number",{"_index":605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('semester",{"_index":596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('status",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('uni_id",{"_index":614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar('year",{"_index":597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":563,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":559,"title":{},"body":{"properties.html":{}}}],["waitforconnections",{"_index":313,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["watch",{"_index":518,"title":{},"body":{"index.html":{}}}],["where(eq(users.id",{"_index":436,"title":{},"body":{"injectables/UsersService.html":{}}}],["where(eq(users.uni_id",{"_index":437,"title":{},"body":{"injectables/UsersService.html":{}}}],["where(isnull(reservations.deleted_at",{"_index":371,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["whether",{"_index":187,"title":{},"body":{"injectables/ApartmentsService.html":{}}}],["year",{"_index":269,"title":{},"body":{"classes/CreateReservationDto.html":{},"miscellaneous/variables.html":{}}}],["you'd",{"_index":538,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":113,"title":{},"body":{"modules/ApartmentsModule.html":{},"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/ApartmentsController.html":{"url":"controllers/ApartmentsController.html","title":"controller - ApartmentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ApartmentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apartments/apartments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                apartments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findAvailableRooms\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                findRoomsByApartment\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateApartmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/apartments/apartments.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateApartmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(gender: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/apartments/apartments.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                gender\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'M'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAvailableRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAvailableRooms(gender: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('available')\n                \n            \n\n                    \n                        \n                            Defined in src/apartments/apartments.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                gender\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'M'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(floor: string, number: string, gender: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('floor/:floor/number/:number')\n                \n            \n\n                    \n                        \n                            Defined in src/apartments/apartments.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                floor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                number\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                gender\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'M'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findRoomsByApartment\n                        \n                    \n                \n            \n            \n                \n                        \n                    findRoomsByApartment(floor: string, number: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('floor/:floor/number/:number/rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/apartments/apartments.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                floor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                number\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(floor: string, number: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':floor/:number/delete')\n                \n            \n\n                    \n                        \n                            Defined in src/apartments/apartments.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                floor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                number\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(floor: string, number: string, dto: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':floor/:number/update')\n                \n            \n\n                    \n                        \n                            Defined in src/apartments/apartments.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                floor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                number\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Patch, Delete, Param, Body, Query } from '@nestjs/common';\nimport { ApartmentsService } from './apartments.service';\nimport { CreateApartmentDto } from './dto/create-apartment.dto';\n\n@Controller('apartments')\nexport class ApartmentsController {\n  constructor(\n    private readonly apartmentService: ApartmentsService,\n  ) {}\n\n  @Get()\n  async findAll(@Query('gender') gender: string = 'M') { \n    const forMale = gender === 'M' ? true : false; \n\n    return this.apartmentService.findAll(forMale);\n  }\n\n  @Get('floor/:floor/number/:number')\n  async findOne(@Param('floor') floor: string, @Param('number') number: string, @Query('gender') gender: string = 'M') {\n    const forMale = gender === 'M' ? true : false; \n    return this.apartmentService.findOne(floor, +number, forMale)\n  }\n\n  @Get('floor/:floor/number/:number/rooms')\n  async findRoomsByApartment(@Param('floor') floor: string, @Param('number') number: string) {\n    return this.apartmentService.findRoomsByApartment(floor, +number);\n  }\n\n  @Get('available')\n  async findAvailableRooms(@Query('gender') gender: string = 'M') {\n    const forMale = gender === 'M' ? true : false;\n    return this.apartmentService.findAvailableRooms(forMale);\n  }\n\n  @Post('create')\n  async create(@Body() dto: CreateApartmentDto) {\n    return this.apartmentService.create(dto);\n  }\n\n  @Patch(':floor/:number/update')\n  async update(@Param('floor') floor: string, @Param('number') number: string, @Body() dto: Partial){\n    return this.apartmentService.update(floor, +number, dto);\n  }\n\n  @Delete(':floor/:number/delete')\n  async remove(@Param('floor') floor: string, @Param('number') number: string) {\n    return this.apartmentService.remove(floor, +number); \n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApartmentsModule.html":{"url":"modules/ApartmentsModule.html","title":"module - ApartmentsModule","body":"\n                   \n\n\n\n\n    Modules\n    ApartmentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApartmentsModule\n\n\n\ncluster_ApartmentsModule_imports\n\n\n\ncluster_ApartmentsModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nApartmentsModule\n\nApartmentsModule\n\nApartmentsModule -->\n\nDatabaseModule->ApartmentsModule\n\n\n\n\n\nApartmentsService\n\nApartmentsService\n\nApartmentsModule -->\n\nApartmentsService->ApartmentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/apartments/apartments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ApartmentsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ApartmentsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ApartmentsController } from './apartments.controller';\nimport { ApartmentsService } from './apartments.service';\nimport { DatabaseModule } from 'src/database/database.module';\n\n@Module({\n  controllers: [ApartmentsController],\n  providers: [ApartmentsService],\n  imports: [DatabaseModule]\n})\nexport class ApartmentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApartmentsService.html":{"url":"injectables/ApartmentsService.html","title":"injectable - ApartmentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApartmentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apartments/apartments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAvailableRooms\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findRoomsByApartment\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: MySql2Database<>)\n                    \n                \n                        \n                            \n                                Defined in src/apartments/apartments.service.ts:9\n                            \n                        \n\n                \n                    \n                            Constructor for the ApartmentsService class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    MySql2Database<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The MySql2Database instance for database operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateApartmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/apartments/apartments.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Creates a new apartment based on the provided CreateApartmentDto.\nThe number of rooms is determined by the apartment type.\nEach room is assigned a unique room number starting from 'A'.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateApartmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The CreateApartmentDto containing apartment details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with a message indicating the apartment creation status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(forMale: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/apartments/apartments.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                forMale\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAvailableRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAvailableRooms(gender: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/apartments/apartments.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Retrieves all available rooms for the given gender.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                gender\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A boolean indicating if the rooms are for males.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of all available rooms for the given gender.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(floor: string, apartmentNumber: number, forMale: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/apartments/apartments.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Retrieves a specific apartment based on floor, apartment number, and gender preference.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                floor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The floor on which the apartment is located.\n\n                                            \n                                        \n                                        \n                                                apartmentNumber\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The specific number of the apartment.\n\n                                            \n                                        \n                                        \n                                                forMale\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A boolean indicating if the apartment is for males.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The apartment matching the specified criteria.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findRoomsByApartment\n                        \n                    \n                \n            \n            \n                \n                        \n                    findRoomsByApartment(floor: string, number: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/apartments/apartments.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Retrieves all rooms for a given apartment.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                floor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The floor on which the apartment is located.\n\n                                            \n                                        \n                                        \n                                                number\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The specific number of the apartment.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of all rooms in the given apartment.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(floor: string, apartmentNumber: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/apartments/apartments.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Removes an existing apartment based on the provided floor and apartment number.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                floor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The floor on which the apartment is located.\n\n                                            \n                                        \n                                        \n                                                apartmentNumber\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The specific number of the apartment.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with a message indicating the apartment removal status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(floor: string, apartmentNumber: number, dto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/apartments/apartments.service.ts:149\n                        \n                    \n\n\n            \n                \n                        Updates an existing apartment based on the provided Partial.\nOnly updates the fields that are provided in the dto.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                floor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The floor on which the apartment is located.\n\n                                            \n                                        \n                                        \n                                                apartmentNumber\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The specific number of the apartment.\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Partial containing the updated apartment details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with a message indicating the apartment update status.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, Inject, Injectable } from '@nestjs/common';\nimport { MYSQL_CONNECTION } from 'src/constants';\nimport * as schema from '../database/schema';\nimport { apartments } from '../database/schema';\nimport { MySql2Database } from 'drizzle-orm/mysql2';\nimport { and, eq } from 'drizzle-orm';\nimport { CreateApartmentDto } from './dto/create-apartment.dto';\n@Injectable()\nexport class ApartmentsService {\n/**\n * Constructor for the ApartmentsService class.\n * \n * @param db The MySql2Database instance for database operations.\n */\n  constructor(\n    @Inject(MYSQL_CONNECTION)\n    private readonly db: MySql2Database, \n  ){}\n\n  async findAll(forMale: boolean) {\n  /**\n   * Retrieves all apartments for the given gender.\n   * @param forMale Whether the apartments are for males or not.\n   * @returns An array of all apartments for the given gender.\n   */\n    const allApartments = await this.db\n      .select()\n      .from(apartments)\n      .where(\n        eq(apartments.for_male, forMale)\n      ); \n\n    return allApartments; \n  }\n\n  \n  /**\n   * Retrieves a specific apartment based on floor, apartment number, and gender preference.\n   * \n   * @param floor The floor on which the apartment is located.\n   * @param apartmentNumber The specific number of the apartment.\n   * @param forMale A boolean indicating if the apartment is for males.\n   * @returns The apartment matching the specified criteria.\n   */\n  async findOne(floor: string, apartmentNumber: number, forMale: boolean) {\n    const apartment = await this.db\n    .select()\n    .from(apartments)\n    .where(\n      and(\n        eq(apartments.floor, floor), \n        eq(apartments.number, apartmentNumber),\n        eq(apartments.for_male, forMale),\n      )\n    ); \n    \n    return apartment; \n  }\n  \n  /**\n   * Retrieves all rooms for a given apartment.\n   * \n   * @param floor The floor on which the apartment is located.\n   * @param number The specific number of the apartment.\n   * @returns An array of all rooms in the given apartment.\n   */\n  async findRoomsByApartment(floor: string, number: number) {\n    const condition = and(\n      eq(apartments.floor, floor),\n      eq(apartments.number, number)\n    ); \n\n    const rooms = await this.db.query.apartments.findMany({\n      where: condition, \n      with: {\n        rooms: true,\n      }\n    }); \n\n    return rooms;\n  }\n\n  /**\n   * Retrieves all available rooms for the given gender.\n   * \n   * @param gender A boolean indicating if the rooms are for males.\n   * @returns An array of all available rooms for the given gender.\n   */\n  async findAvailableRooms(gender: boolean) {\n    const rooms = await this.db.query.apartments.findMany({\n      where: eq(apartments.for_male, gender),\n      with: {\n        rooms: {\n          where: eq(schema.rooms.is_available, true),\n        }\n      }\n    }); \n\n    return rooms; \n  }\n\n/**\n * Creates a new apartment based on the provided CreateApartmentDto.\n * The number of rooms is determined by the apartment type.\n * Each room is assigned a unique room number starting from 'A'.\n * \n * @param dto The CreateApartmentDto containing apartment details.\n * @returns An object with a message indicating the apartment creation status.\n */\n  async create(dto: CreateApartmentDto) {\n    const roomsCount = dto.apartment_type === \"standard\" ? 2\n                        : dto.apartment_type === \"economy\" ? 3\n                        : 1 //private\n\n    \n    let roomLetter = 'A'; \n\n    await this.db.transaction(async (tx) => {\n      const [result] = await tx\n      .insert(apartments)\n      .values(dto); \n\n      for (let i =0; i .\n   * Only updates the fields that are provided in the dto.\n   * \n   * @param floor The floor on which the apartment is located.\n   * @param apartmentNumber The specific number of the apartment.\n   * @param dto The Partial containing the updated apartment details.\n   * @returns An object with a message indicating the apartment update status.\n   */\n  async update(floor: string, apartmentNumber: number, dto: Partial) {\n    await this.db\n      .update(apartments)\n      .set({\n        ...dto,\n        updated_at: new Date(),\n      })\n      .where(\n        and(\n          eq(apartments.floor, floor),\n          eq(apartments.number, apartmentNumber),\n        )\n      ); \n\n    return {\n      message: \"Apartment Updated\",\n    }\n  }\n\n  /**\n   * Removes an existing apartment based on the provided floor and apartment number.\n   * \n   * @param floor The floor on which the apartment is located.\n   * @param apartmentNumber The specific number of the apartment.\n   * @returns An object with a message indicating the apartment removal status.\n   */\n  async remove(floor: string, apartmentNumber: number){\n\n    const apartment = await this.db.query.apartments.findFirst({\n      where: and(\n        eq(apartments.floor, floor),\n        eq(apartments.number, apartmentNumber),\n      ),\n      with: {\n        rooms: true,\n      }\n    });\n\n    if(!apartment) throw new HttpException(\"Apartment Not Found\", 404);\n\n    for(let i=0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nApartmentsModule\n\nApartmentsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApartmentsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nReservationsModule\n\nReservationsModule\n\nAppModule -->\n\nReservationsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ApartmentsModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            ReservationsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseModule } from './database/database.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersModule } from './users/users.module';\nimport { ApartmentsModule } from './apartments/apartments.module';\nimport { ReservationsModule } from './reservations/reservations.module';\nimport databaseConfig from './config/database.config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [databaseConfig],\n      cache: true,\n      envFilePath: '.env',\n    }),\n    DatabaseModule,\n    UsersModule,\n    ApartmentsModule,\n    ReservationsModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateApartmentDto.html":{"url":"classes/CreateApartmentDto.html","title":"class - CreateApartmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateApartmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apartments/dto/create-apartment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                apartment_type\n                            \n                            \n                                    \n                                    \n                                floor\n                            \n                            \n                                    \n                                    \n                                for_male\n                            \n                            \n                                    \n                                    \n                                number\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        apartment_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartments/dto/create-apartment.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        floor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartments/dto/create-apartment.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        for_male\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartments/dto/create-apartment.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartments/dto/create-apartment.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsInt, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreateApartmentDto {\n  @IsString()\n  @IsNotEmpty()\n  floor: string;\n\n  @IsInt()\n  @IsNotEmpty()\n  number: number;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  for_male: boolean;\n\n  @IsString()\n  @IsNotEmpty()\n  apartment_type: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateReservationDto.html":{"url":"classes/CreateReservationDto.html","title":"class - CreateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservations/dto/create-reservation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                room_id\n                            \n                            \n                                    \n                                    \n                                semester\n                            \n                            \n                                    \n                                    \n                                user_id\n                            \n                            \n                                    \n                                    \n                                year\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        room_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservations/dto/create-reservation.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        semester\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservations/dto/create-reservation.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservations/dto/create-reservation.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        year\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservations/dto/create-reservation.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreateReservationDto {\n\n  @IsInt()\n  @IsNotEmpty()\n  user_id: number;\n\n  @IsInt()\n  @IsNotEmpty()\n  room_id: number;\n\n  @IsString()\n  @IsNotEmpty()\n  semester: string; \n\n  @IsString()\n  @IsNotEmpty()\n  year: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                has_deposit\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                uni_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        has_deposit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(undefined)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        uni_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsEmail, IsIn, IsNotEmpty, IsString, IsUrl } from \"class-validator\";\nimport { ROLES } from \"src/utils/Roles.enum\";\n\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string; \n  \n  @IsString()\n  @IsNotEmpty()\n  uni_id: string;\n  \n  @IsEmail()\n  @IsNotEmpty()\n  email: string; \n\n  @IsUrl()\n  image: string; \n\n  @IsString()\n  @IsIn(Object.values(ROLES))\n  @IsNotEmpty()\n  role: string; \n\n  @IsBoolean()\n  has_deposit: boolean;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { createPool } from 'mysql2/promise';\nimport { drizzle } from 'drizzle-orm/mysql2'; \nimport { MYSQL_CONNECTION } from '../constants';\nimport * as schema from './schema';\n\n@Module({\n  providers: [\n    {\n      provide: MYSQL_CONNECTION,\n      inject: [ConfigService], \n      useFactory: async (configService: ConfigService) => {\n        const host = configService.get('DB_HOST');\n        const user = configService.get('DB_USERNAME');\n        const database = configService.get('DB_NAME');\n        const password = configService.get('DB_PASSWORD');\n        const port = configService.get('DB_PORT');\n        \n        const pool = createPool({\n          host,\n          user,\n          database, \n          password, \n          port, \n          waitForConnections: true, \n          connectionLimit: 10,\n          queueLimit: 0,\n        });\n\n        return drizzle(pool, {mode: 'default', schema})\n      }\n    }\n  ],\n  exports: [MYSQL_CONNECTION],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReservationsController.html":{"url":"controllers/ReservationsController.html","title":"controller - ReservationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReservationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservations/reservations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                reservations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateReservationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/reservations/reservations.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateReservationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/reservations/reservations.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':user_id')\n                \n            \n\n                    \n                        \n                            Defined in src/reservations/reservations.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/remove')\n                \n            \n\n                    \n                        \n                            Defined in src/reservations/reservations.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/update')\n                \n            \n\n                    \n                        \n                            Defined in src/reservations/reservations.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Patch, Delete, Body, Param } from '@nestjs/common';\nimport { ReservationsService } from './reservations.service';\nimport { CreateReservationDto } from './dto/create-reservation.dto';\n\n@Controller('reservations')\nexport class ReservationsController {\n\n  constructor(\n    private readonly reservationService: ReservationsService\n  ) {}\n\n  @Get()\n  findAll() {\n    return this.reservationService.findAll();\n  }\n\n  @Get(':user_id')\n  findOne(@Param('user_id') userId: string) {\n    return this.reservationService.findOne(+userId);\n  }\n\n  @Post('create')\n  create(@Body() dto: CreateReservationDto) {\n    return this.reservationService.create(dto);\n  }\n\n  @Patch(':id/update')\n  update(@Param('id') id: string, @Body() dto: Partial) {\n    return this.reservationService.update(+id, dto);\n  }\n\n  @Delete(':id/remove')\n  remove(@Param('id') id: string) {\n    return this.reservationService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReservationsModule.html":{"url":"modules/ReservationsModule.html","title":"module - ReservationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ReservationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReservationsModule\n\n\n\ncluster_ReservationsModule_imports\n\n\n\ncluster_ReservationsModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nReservationsModule\n\nReservationsModule\n\nReservationsModule -->\n\nDatabaseModule->ReservationsModule\n\n\n\n\n\nReservationsService\n\nReservationsService\n\nReservationsModule -->\n\nReservationsService->ReservationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/reservations/reservations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReservationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReservationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ReservationsService } from './reservations.service';\nimport { ReservationsController } from './reservations.controller';\nimport { DatabaseModule } from 'src/database/database.module';\n\n@Module({\n  providers: [ReservationsService],\n  controllers: [ReservationsController],\n  imports: [DatabaseModule]\n})\nexport class ReservationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReservationsService.html":{"url":"injectables/ReservationsService.html","title":"injectable - ReservationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservations/reservations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: MySql2Database<>)\n                    \n                \n                        \n                            \n                                Defined in src/reservations/reservations.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    MySql2Database<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateReservationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Creates a new reservation based on the provided CreateReservationDto.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateReservationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The CreateReservationDto containing reservation details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with a message indicating the reservation creation status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Retrieves all reservations from the database.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of all reservations in the database.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Retrieves a reservation based on the provided user ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user ID for which the reservation should be retrieved.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The reservation matching the specified user ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:93\n                        \n                    \n\n\n            \n                \n                        Soft deletes a reservation by setting the deleted_at field to the current date.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the reservation to soft delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with a message indicating the reservation removal status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, dto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:71\n                        \n                    \n\n\n            \n                \n                        Updates an existing reservation based on the provided Partial.\nOnly updates the fields that are provided in the dto.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the reservation to update.\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Partial containing the updated reservation details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with a message indicating the reservation update status.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { MySql2Database } from 'drizzle-orm/mysql2';\nimport { MYSQL_CONNECTION } from 'src/constants';\nimport * as schema from '../database/schema';\nimport { reservations } from '../database/schema';\nimport { eq, isNull } from 'drizzle-orm';\nimport { CreateReservationDto } from './dto/create-reservation.dto';\n@Injectable()\nexport class ReservationsService {\n  constructor(\n    @Inject(MYSQL_CONNECTION)\n    private readonly db: MySql2Database,\n  ){}\n\n  /**\n   * Retrieves all reservations from the database.\n   * \n   * @returns An array of all reservations in the database.\n   */\n  async findAll() {\n    const allReservations = await this.db\n      .select()\n      .from(reservations)\n      .where(isNull(reservations.deleted_at));\n \n    return allReservations;\n  }\n\n  /**\n   * Retrieves a reservation based on the provided user ID.\n   * \n   * @param userId The user ID for which the reservation should be retrieved.\n   * @returns The reservation matching the specified user ID.\n   */\n  async findOne(userId: number) {\n    const reservation = await this.db.query.reservations.findFirst({\n      where: eq(reservations.user_id, userId),\n      with: {\n        room: true,\n        user: true,\n      }\n    }); \n\n    return reservation; \n  }\n\n  /**\n   * Creates a new reservation based on the provided CreateReservationDto.\n   * \n   * @param dto The CreateReservationDto containing reservation details.\n   * @returns An object with a message indicating the reservation creation status.\n   */\n  async create(dto: CreateReservationDto) {\n    await this.db\n      .insert(reservations)\n      .values(dto); \n\n    return {\n      message: \"Reservation Created\"\n    }\n  }\n\n  /**\n   * Updates an existing reservation based on the provided Partial.\n   * Only updates the fields that are provided in the dto.\n   * \n   * @param id The ID of the reservation to update.\n   * @param dto The Partial containing the updated reservation details.\n   * @returns An object with a message indicating the reservation update status.\n   */\n  async update(id: number, dto: Partial) {\n    await this.db\n      .update(reservations)\n      .set({\n        ...dto, \n        updated_at: new Date(),\n      })\n      .where(\n        eq(reservations.id, id)\n      ); \n\n    return {\n      message: \"Reservation Updated\"\n    }\n  }\n\n  /**\n   * Soft deletes a reservation by setting the deleted_at field to the current date.\n   * \n   * @param id The ID of the reservation to soft delete.\n   * @returns An object with a message indicating the reservation removal status.\n   */\n  async remove(id: number) {\n    await this.db\n      .update(reservations)\n      .set({\n        deleted_at: new Date(),\n      })\n      .where(\n        eq(reservations.id, id)\n      ); \n\n    return {\n      message: \"Reservation Removed\"\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from \"./create-user.dto\";\nimport { PartialType } from '@nestjs/mapped-types';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findByUniId\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findByUniId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUniId(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/delete')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/update')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Patch, Post, Query } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Controller('users')\nexport class UsersController {\n\n  constructor(\n    private readonly userService: UsersService,\n  ) {}\n\n  @Get() \n  async getAll() {\n    return this.userService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    return this.userService.findOne(+id);\n  }\n\n  @Get()\n  async findByUniId(@Query('uniId') id: string) {\n    return this.userService.findByUniId(id);\n  }\n\n  @Post('create')\n  async create(@Body() dto: CreateUserDto) {\n    return this.userService.create(dto);\n  }\n  \n  @Patch(':id/update')\n  async update(@Param('id') id: string,@Body() dto: UpdateUserDto) {\n    return this.userService.update(+id, dto);\n  }\n\n  @Delete(':id/delete')\n  async remove(@Param('id') id: string) {\n    return this.userService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { DatabaseModule } from 'src/database/database.module';\n\n@Module({\n  providers: [UsersService],\n  controllers: [UsersController], \n  imports: [DatabaseModule]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByUniId\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: MySql2Database<>)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor for the UsersService class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    MySql2Database<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The MySql2Database instance for database operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:70\n                        \n                    \n\n\n            \n                \n                        Creates a new user based on the provided CreateUserDto.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The CreateUserDto containing user details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with a message indicating the user creation status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Retrieves all users from the database.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of all users in the database.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUniId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUniId(uniId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Retrieves a user based on the provided university ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uniId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The university ID of the user to retrieve.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user matching the specified university ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieves a user based on the provided user ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user to retrieve.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user matching the specified ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, dto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Updates an existing user based on the provided UpdateUserDto.\nOnly updates the fields that are provided in the dto.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user to update.\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The UpdateUserDto containing the updated user details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with a message indicating the user update status.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { MySql2Database } from 'drizzle-orm/mysql2';\nimport { MYSQL_CONNECTION } from 'src/constants';\nimport * as schema from '../database/schema';\nimport { users } from '../database/schema';\nimport { eq } from 'drizzle-orm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor for the UsersService class.\n   * \n   * @param db The MySql2Database instance for database operations.\n   */\n  constructor(\n    @Inject(MYSQL_CONNECTION)\n    private readonly db: MySql2Database, \n  ){}\n\n\n  /**\n   * Retrieves all users from the database.\n   * \n   * @returns An array of all users in the database.\n   */\n  async findAll() {\n    const allUsers = await this.db.select().from(users); \n\n    return allUsers; \n  }\n\n/**\n * Retrieves a user based on the provided user ID.\n * \n * @param id The ID of the user to retrieve.\n * @returns The user matching the specified ID.\n */\n  async findOne(id: number) {\n    const user = await this.db\n      .select()\n      .from(users)\n      .where(eq(users.id, id)); \n\n    return user; \n  }\n\n  /**\n   * Retrieves a user based on the provided university ID.\n   * \n   * @param uniId The university ID of the user to retrieve.\n   * @returns The user matching the specified university ID.\n   */\n  async findByUniId(uniId: string) {\n    const user = await this.db\n      .select()\n      .from(users)\n      .where(eq(users.uni_id, uniId)); \n\n    return user; \n  }\n\n  /**\n   * Creates a new user based on the provided CreateUserDto.\n   * \n   * @param dto The CreateUserDto containing user details.\n   * @returns An object with a message indicating the user creation status.\n   */\n  async create(dto: CreateUserDto) {\n    await this.db\n      .insert(users)\n      .values(dto); \n\n    return {\n      message: \"User Created\"\n    }\n  }\n\n  /**\n   * Updates an existing user based on the provided UpdateUserDto.\n   * Only updates the fields that are provided in the dto.\n   * \n   * @param id The ID of the user to update.\n   * @param dto The UpdateUserDto containing the updated user details.\n   * @returns An object with a message indicating the user update status.\n   */\n  async update(id: number, dto: UpdateUserDto) {\n    await this.db\n      .update(users)\n      .set({\n        ...dto,\n        updated_at: new Date(),\n      })\n      .where(eq(users.id, id)); \n\n      return {\n        message: \"User Updated\",\n      }\n  }\n\n  async remove(id: number) {\n    // await this.db\n    //   .update(users)\n    //   .set({\n    //     deleted_at: new Date(), \n    //     updated_at: new Date(),\n    //   })\n    //   .where(eq(users.id, id)); \n\n    await this.db.delete(users).where(eq(users.id, id));\n    return {\n      message: \"User Removed\",\n    }\n\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/apartments/apartments.controller.ts\n            \n            controller\n            ApartmentsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/apartments/apartments.service.ts\n            \n            injectable\n            ApartmentsService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/apartments/dto/create-apartment.dto.ts\n            \n            class\n            CreateApartmentDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/constants/index.ts\n            \n            variable\n            MYSQL_CONNECTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            apartments\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            apartmentsRelations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            inspections\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            reservations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            reservationsRelations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            rooms\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            roomsRelations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            users\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/schema.ts\n            \n            variable\n            usersRelations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/reservations/dto/create-reservation.dto.ts\n            \n            class\n            CreateReservationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/reservations/reservations.controller.ts\n            \n            controller\n            ReservationsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/reservations/reservations.service.ts\n            \n            injectable\n            ReservationsService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                75 %\n                (6/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            drizzle-orm : ^0.34.1\n        \n            mysql2 : ^3.11.3\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ROLES   (src/.../Roles.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/Roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ROLES\n                    \n                \n                        \n                            \n                                 SUPER_ADMIN\n                            \n                        \n                        \n                            \n                                Value : super_admin\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 STUDENT\n                            \n                        \n                        \n                            \n                                Value : student\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthors - Ali Muhsin and Mohammed Salih\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApartmentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReservationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApartmentsModule\n\n\n\ncluster_ApartmentsModule_imports\n\n\n\ncluster_ApartmentsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ReservationsModule\n\n\n\ncluster_ReservationsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nApartmentsModule\n\nApartmentsModule\n\nApartmentsModule -->\n\nDatabaseModule->ApartmentsModule\n\n\n\n\n\nReservationsModule\n\nReservationsModule\n\nReservationsModule -->\n\nDatabaseModule->ReservationsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nApartmentsModule->AppModule\n\n\n\n\n\nApartmentsService\n\nApartmentsService\n\nApartmentsModule -->\n\nApartmentsService->ApartmentsModule\n\n\n\nAppModule -->\n\nReservationsModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nReservationsService\n\nReservationsService\n\nReservationsModule -->\n\nReservationsService->ReservationsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            apartments   (src/.../schema.ts)\n                        \n                        \n                            apartmentsRelations   (src/.../schema.ts)\n                        \n                        \n                            inspections   (src/.../schema.ts)\n                        \n                        \n                            MYSQL_CONNECTION   (src/.../index.ts)\n                        \n                        \n                            reservations   (src/.../schema.ts)\n                        \n                        \n                            reservationsRelations   (src/.../schema.ts)\n                        \n                        \n                            rooms   (src/.../schema.ts)\n                        \n                        \n                            roomsRelations   (src/.../schema.ts)\n                        \n                        \n                            users   (src/.../schema.ts)\n                        \n                        \n                            usersRelations   (src/.../schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        apartments\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysqlTable('apartments', {\n  id: int('id').primaryKey().autoincrement(),\n  floor: varchar('floor', { length: 2 }).notNull(),\n  number: int('number').notNull(),\n  for_male: boolean(`for_male`).notNull().default(true),\n  apartment_type: varchar('apartment_type', { length: 255 }).notNull(),\n  created_at: timestamp('created_at').notNull().defaultNow(),\n  updated_at: timestamp('updated_at').notNull().defaultNow(),\n  deleted_at: timestamp('deleted_at'),\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        apartmentsRelations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : relations(apartments, ({many}) => ({\n  rooms: many(rooms),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inspections\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysqlTable('inspections', {\n  id: int('id').primaryKey().autoincrement(),\n  reservation_id: int('reservation_id')\n    .references(() => reservations.id)\n    .notNull(), \n  inspection_date: timestamp('inspection_date').notNull(),\n  status: varchar('status', { length: 255 }).notNull().default('pending'),\n  created_at: timestamp('created_at').notNull().defaultNow(),\n  updated_at: timestamp('updated_at').notNull().defaultNow(),\n  deleted_at: timestamp('deleted_at')\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reservations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysqlTable('reservations', {\n  id: int('id').primaryKey().autoincrement(), \n  user_id: int('user_id')\n    .references(() => users.id)\n    .notNull(), \n  room_id: int('room_id')\n    .references(() => rooms.id)\n    .notNull(), \n  status: varchar('status', { length: 255 }).notNull().default('pending'),\n  semester: varchar('semester', { length: 255 }).notNull(),\n  year: varchar('year', { length: 4 }).notNull(),\n  created_at: timestamp('created_at').notNull().defaultNow(),\n  updated_at: timestamp('updated_at').notNull().defaultNow(),\n  deleted_at: timestamp('deleted_at'),\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reservationsRelations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : relations(reservations, ({many}) => ({\n  user: many(users),\n  room: many(rooms),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rooms\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysqlTable('rooms', {\n  id: int('id').primaryKey().autoincrement(), \n  apartment_id: int('apartment_id')\n    .references(() => apartments.id)\n    .notNull(), \n  room_number: varchar('room_number', { length: 3 }).notNull(),\n  is_available: boolean('is_available').notNull().default(true),\n  created_at: timestamp('created_at').notNull().defaultNow(),\n  updated_at: timestamp('updated_at').notNull().defaultNow(),\n  deleted_at: timestamp('deleted_at'),\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomsRelations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : relations(rooms, ({one}) => ({\n  apartment: one(apartments, {\n    fields: [rooms.apartment_id],\n    references: [apartments.id],\n  }),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysqlTable('users',{ \n  id: int('id').primaryKey().autoincrement(), \n  name: varchar('name', { length: 255 }).notNull(),\n  uni_id: varchar('uni_id', {length: 255}).unique().notNull(),\n  email: varchar('email', { length: 255 }).unique().notNull(),\n  image: varchar('image', { length: 255 }).notNull(),\n  role: varchar('role', { length: 255 }).notNull().default('resident'),\n  gender: boolean('gender').notNull().default(true), //true = male, false = female\n  has_deposit: boolean('has_deposit').notNull().default(false),\n  created_at: timestamp('created_at').notNull().defaultNow(),\n  updated_at: timestamp('updated_at').notNull().defaultNow(),\n  deleted_at: timestamp('deleted_at'),\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usersRelations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : relations(users, ({one}) => ({\n  reservation: one(reservations, {\n    fields: [users.id],\n    references: [reservations.user_id],\n  })\n}))\n                    \n                \n\n\n        \n    \n\n    src/constants/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MYSQL_CONNECTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'MYSQL_CONNECTION'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
